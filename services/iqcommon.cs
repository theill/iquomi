//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.1.4322.573.
// 
using System.Xml.Serialization;


/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
[System.Xml.Serialization.XmlRootAttribute("subscription", Namespace="http://schemas.iquomi.com/2004/01/core", IsNullable=false)]
public class subscriptionType {
    
    /// <remarks/>
    public subscriptionTypeTrigger trigger;
    
    /// <remarks/>
    public System.DateTime expiresAt;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool expiresAtSpecified;
    
    /// <remarks/>
    public subscriptionTypeContext context;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")]
    public string to;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
    public string changeNumber;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string id;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="hexBinary")]
    public System.Byte[] creator;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class subscriptionTypeTrigger {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string select;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public subscriptionTypeTriggerMode mode;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
    public string baseChangeNumber;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public enum subscriptionTypeTriggerMode {
    
    /// <remarks/>
    includeData,
    
    /// <remarks/>
    excludeData,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class subscriptionTypeContext {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAnyElementAttribute()]
    public System.Xml.XmlElement[] Any;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public string uri;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
[System.Xml.Serialization.XmlRootAttribute("insertRequest", Namespace="http://schemas.iquomi.com/2004/01/core", IsNullable=false)]
public class insertRequestType {
    
    /// <remarks/>
    public insertRequestOptionsType options;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("attributes")]
    public redAttributeType[] attributes;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAnyElementAttribute()]
    public System.Xml.XmlElement[] Any;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string select;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public useClientIdsType useClientIds;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool useClientIdsSpecified;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public int minOccurs;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool minOccursSpecified;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public int maxOccurs;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool maxOccursSpecified;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class insertRequestOptionsType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAnyElementAttribute()]
    public System.Xml.XmlElement[] Any;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class redAttributeType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAnyAttributeAttribute()]
    public System.Xml.XmlAttribute[] AnyAttr;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public enum useClientIdsType {
    
    /// <remarks/>
    @true,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
[System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.iquomi.com/2004/01/core", IsNullable=false)]
public class insertResponse {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("newBlueId")]
    public newBlueIdType[] newBlueId;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
    public string newChangeNumber;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public int selectedNodeCount;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool selectedNodeCountSpecified;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public responseStatus status;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class newBlueIdType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string id;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public enum responseStatus {
    
    /// <remarks/>
    success,
    
    /// <remarks/>
    failure,
    
    /// <remarks/>
    rollback,
    
    /// <remarks/>
    notAttempted,
    
    /// <remarks/>
    accessDenied,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
[System.Xml.Serialization.XmlRootAttribute("deleteRequest", Namespace="http://schemas.iquomi.com/2004/01/core", IsNullable=false)]
public class deleteRequestType {
    
    /// <remarks/>
    public deleteRequestOptionsType options;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string select;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public int minOccurs;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool minOccursSpecified;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public int maxOccurs;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool maxOccursSpecified;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class deleteRequestOptionsType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAnyElementAttribute()]
    public System.Xml.XmlElement[] Any;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
[System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.iquomi.com/2004/01/core", IsNullable=false)]
public class deleteResponse {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
    public string newChangeNumber;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public int selectedNodeCount;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool selectedNodeCountSpecified;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public responseStatus status;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
[System.Xml.Serialization.XmlRootAttribute("replaceRequest", Namespace="http://schemas.iquomi.com/2004/01/core", IsNullable=false)]
public class replaceRequestType {
    
    /// <remarks/>
    public replaceRequestOptionsType options;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("attributes")]
    public redAttributeType[] attributes;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAnyElementAttribute()]
    public System.Xml.XmlElement[] Any;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string select;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public useClientIdsType useClientIds;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool useClientIdsSpecified;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public int minOccurs;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool minOccursSpecified;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public int maxOccurs;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool maxOccursSpecified;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class replaceRequestOptionsType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAnyElementAttribute()]
    public System.Xml.XmlElement[] Any;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
[System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.iquomi.com/2004/01/core", IsNullable=false)]
public class replaceResponse {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("newBlueId")]
    public newBlueIdType[] newBlueId;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
    public string newChangeNumber;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public int selectedNodeCount;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool selectedNodeCountSpecified;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public responseStatus status;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
[System.Xml.Serialization.XmlRootAttribute("updateRequest", Namespace="http://schemas.iquomi.com/2004/01/core", IsNullable=false)]
public class updateRequestType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("updateBlock")]
    public updateBlockType[] updateBlock;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class updateBlockType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("insertRequest")]
    public insertRequestType[] insertRequest;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("deleteRequest")]
    public deleteRequestType[] deleteRequest;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("replaceRequest")]
    public replaceRequestType[] replaceRequest;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string select;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public updateBlockTypeOnError onError;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public enum updateBlockTypeOnError {
    
    /// <remarks/>
    rollbackBlockAndFail,
    
    /// <remarks/>
    rollbackBlockAndContinue,
    
    /// <remarks/>
    ignore,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
[System.Xml.Serialization.XmlRootAttribute("updateResponse", Namespace="http://schemas.iquomi.com/2004/01/core", IsNullable=false)]
public class updateResponseType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("updateBlockStatus")]
    public updateResponseTypeUpdateBlockStatus[] updateBlockStatus;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
    public string newChangeNumber;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class updateResponseTypeUpdateBlockStatus {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("insertResponse")]
    public insertResponse[] insertResponse;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("deleteResponse")]
    public deleteResponse[] deleteResponse;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("replaceResponse")]
    public replaceResponse[] replaceResponse;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public int selectedNodeCount;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool selectedNodeCountSpecified;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public responseStatus status;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
[System.Xml.Serialization.XmlRootAttribute("queryRequest", Namespace="http://schemas.iquomi.com/2004/01/core", IsNullable=false)]
public class queryRequestType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("xpQuery")]
    public xpQueryType[] xpQuery;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("changeQuery")]
    public changeQueryType[] changeQuery;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class xpQueryType {
    
    /// <remarks/>
    public queryOptionsType options;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string select;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public int minOccurs;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool minOccursSpecified;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public int maxOccurs;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool maxOccursSpecified;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class queryOptionsType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAnyElementAttribute()]
    public System.Xml.XmlElement[] Any;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("sort")]
    public sortType[] sort;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("range")]
    public rangeType[] range;
    
    /// <remarks/>
    public shapeType shape;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class sortType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(sortTypeDirection.ascending)]
    public sortTypeDirection direction = sortTypeDirection.ascending;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string key;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public enum sortTypeDirection {
    
    /// <remarks/>
    ascending,
    
    /// <remarks/>
    descending,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class rangeType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string first;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public int count;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class shapeType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("include")]
    public shapeAtomType[] include;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("exclude")]
    public shapeAtomType[] exclude;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public shapeTypeBase @base;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool baseSpecified;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class shapeAtomType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string select;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public enum shapeTypeBase {
    
    /// <remarks/>
    t,
    
    /// <remarks/>
    nil,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class changeQueryType {
    
    /// <remarks/>
    public queryOptionsType options;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string select;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
    public string baseChangeNumber;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
[System.Xml.Serialization.XmlRootAttribute("queryResponse", Namespace="http://schemas.iquomi.com/2004/01/core", IsNullable=false)]
public class queryResponseType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("xpQueryResponse")]
    public queryResponseTypeXpQueryResponse[] xpQueryResponse;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("changeQueryResponse")]
    public queryResponseTypeChangeQueryResponse[] changeQueryResponse;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class queryResponseTypeXpQueryResponse {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAnyElementAttribute()]
    public System.Xml.XmlElement[] Any;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public int selectedNodeCount;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool selectedNodeCountSpecified;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public responseStatus status;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class queryResponseTypeChangeQueryResponse {
    
    /// <remarks/>
    public changedBlueType changedBlue;
    
    /// <remarks/>
    public deletedBlueType deletedBlue;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
    public string baseChangeNumber;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public int selectedNodeCount;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool selectedNodeCountSpecified;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public responseStatus status;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class changedBlueType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAnyElementAttribute()]
    public System.Xml.XmlElement[] Any;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class deletedBlueType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string id;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
[System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.iquomi.com/2004/01/core", IsNullable=false)]
public class subscriptionResponse {
    
    /// <remarks/>
    public subscriptionResponseTriggerData triggerData;
    
    /// <remarks/>
    public subscriptionResponseContext context;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class subscriptionResponseTriggerData {
    
    /// <remarks/>
    public changedBlueType changedBlue;
    
    /// <remarks/>
    public deletedBlueType deletedBlue;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class subscriptionResponseContext {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAnyElementAttribute()]
    public System.Xml.XmlElement[] Any;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
    public string uri;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
[System.Xml.Serialization.XmlRootAttribute("roleMap", Namespace="http://schemas.iquomi.com/2004/01/core", IsNullable=false)]
public class roleMapType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("scope")]
    public roleMapTypeScope[] scope;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("roleTemplate")]
    public roleMapTypeRoleTemplate[] roleTemplate;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
    public string changeNumber;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string id;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(DataType="hexBinary")]
    public System.Byte[] creator;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class roleMapTypeScope : scopeType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string id;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(roleMapTypeScope))]
public class scopeType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("name")]
    public localizableString[] name;
    
    /// <remarks/>
    public shapeType shape;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class localizableString {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.w3.org/XML/1998/namespace")]
    public string lang;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public dirType dir;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool dirSpecified;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTextAttribute()]
    public string Value;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public enum dirType {
    
    /// <remarks/>
    rtl,
    
    /// <remarks/>
    ltr,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class roleMapTypeRoleTemplate {
    
    /// <remarks/>
    public localizableString fullDescription;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("method")]
    public roleMapTypeRoleTemplateMethod[] method;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string name;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class roleMapTypeRoleTemplateMethod {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string name;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string scopeRef;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
[System.Xml.Serialization.XmlRootAttribute("identity", Namespace="http://schemas.iquomi.com/2004/01/core", IsNullable=false)]
public class identityType {
    
    /// <remarks/>
    public int kerberos;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
[System.Xml.Serialization.XmlRootAttribute("request", Namespace="http://schemas.iquomi.com/2004/01/core", IsNullable=false)]
public class requestType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("key")]
    public requestTypeKey[] key;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string service;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public requestTypeDocument document;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string method;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public requestTypeGenResponse genResponse;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public class requestTypeKey {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string puid;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string instance;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string cluster;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public enum requestTypeDocument {
    
    /// <remarks/>
    content,
    
    /// <remarks/>
    roleList,
    
    /// <remarks/>
    policy,
    
    /// <remarks/>
    system,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
public enum requestTypeGenResponse {
    
    /// <remarks/>
    always,
    
    /// <remarks/>
    never,
    
    /// <remarks/>
    faultOnly,
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
[System.Xml.Serialization.XmlRootAttribute("response", Namespace="http://schemas.iquomi.com/2004/01/core", IsNullable=false)]
public class responseType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    public string role;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
[System.Xml.Serialization.XmlRootAttribute("echoBack", Namespace="http://schemas.iquomi.com/2004/01/core", IsNullable=false)]
public class echoBackType {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAnyElementAttribute()]
    public System.Xml.XmlElement[] Any;
}
