//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version:2.0.40607.16
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Commanigy.Iquomi {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataAccess")]
    public partial class DataAccess : System.Data.DataSet {
        
        private AccountEntityDataTable tableAccountEntity;
        
        private ServiceEntityDataTable tableServiceEntity;
        
        private SubscriptionEntityDataTable tableSubscriptionEntity;
        
        public DataAccess() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        protected DataAccess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["AccountEntity"] != null)) {
                    base.Tables.Add(new AccountEntityDataTable(ds.Tables["AccountEntity"]));
                }
                if ((ds.Tables["ServiceEntity"] != null)) {
                    base.Tables.Add(new ServiceEntityDataTable(ds.Tables["ServiceEntity"]));
                }
                if ((ds.Tables["SubscriptionEntity"] != null)) {
                    base.Tables.Add(new SubscriptionEntityDataTable(ds.Tables["SubscriptionEntity"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AccountEntityDataTable AccountEntity {
            get {
                return this.tableAccountEntity;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServiceEntityDataTable ServiceEntity {
            get {
                return this.tableServiceEntity;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubscriptionEntityDataTable SubscriptionEntity {
            get {
                return this.tableSubscriptionEntity;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(false)]
        public new bool EnforceConstraints {
            get {
                return base.EnforceConstraints;
            }
            set {
                base.EnforceConstraints = value;
            }
        }
        
        public override System.Data.DataSet Clone() {
            DataAccess cln = ((DataAccess)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            this.Reset();
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["AccountEntity"] != null)) {
                base.Tables.Add(new AccountEntityDataTable(ds.Tables["AccountEntity"]));
            }
            if ((ds.Tables["ServiceEntity"] != null)) {
                base.Tables.Add(new ServiceEntityDataTable(ds.Tables["ServiceEntity"]));
            }
            if ((ds.Tables["SubscriptionEntity"] != null)) {
                base.Tables.Add(new SubscriptionEntityDataTable(ds.Tables["SubscriptionEntity"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.InitVars(true);
        }
        
        internal void InitVars(bool initTable) {
            this.tableAccountEntity = ((AccountEntityDataTable)(base.Tables["AccountEntity"]));
            if ((initTable == true)) {
                if ((this.tableAccountEntity != null)) {
                    this.tableAccountEntity.InitVars();
                }
            }
            this.tableServiceEntity = ((ServiceEntityDataTable)(base.Tables["ServiceEntity"]));
            if ((initTable == true)) {
                if ((this.tableServiceEntity != null)) {
                    this.tableServiceEntity.InitVars();
                }
            }
            this.tableSubscriptionEntity = ((SubscriptionEntityDataTable)(base.Tables["SubscriptionEntity"]));
            if ((initTable == true)) {
                if ((this.tableSubscriptionEntity != null)) {
                    this.tableSubscriptionEntity.InitVars();
                }
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataAccess";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = false;
            this.tableAccountEntity = new AccountEntityDataTable();
            base.Tables.Add(this.tableAccountEntity);
            this.tableServiceEntity = new ServiceEntityDataTable();
            base.Tables.Add(this.tableServiceEntity);
            this.tableSubscriptionEntity = new SubscriptionEntityDataTable();
            base.Tables.Add(this.tableSubscriptionEntity);
            this.ExtendedProperties.Add("DSGenerator_DataSetName", "DataAccess");
            this.ExtendedProperties.Add("User_DataSetName", "DataAccess");
        }
        
        private bool ShouldSerializeAccountEntity() {
            return false;
        }
        
        private bool ShouldSerializeServiceEntity() {
            return false;
        }
        
        private bool ShouldSerializeSubscriptionEntity() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataAccess ds = new DataAccess();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            if (PublishLegacyWSDL()) {
                System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
                any.Namespace = ds.Namespace;
                sequence.Items.Add(any);
            }
            else {
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(0);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                sequence.MaxOccurs = decimal.MaxValue;
                System.Xml.Schema.XmlSchemaAttribute attribute = new System.Xml.Schema.XmlSchemaAttribute();
                attribute.Name = "namespace";
                attribute.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute);
            }
            type.Particle = sequence;
            return type;
        }
        
        protected static bool PublishLegacyWSDL() {
            System.Collections.Specialized.NameValueCollection settings = ((System.Collections.Specialized.NameValueCollection)(System.Configuration.ConfigurationSettings.GetConfig("system.data.dataset")));
            if ((settings != null)) {
                string[] values = settings.GetValues("WSDL_VERSION");
                if ((values != null)) {
                    float version = float.Parse(((string)(values[0])), ((System.IFormatProvider)(null)));
                    return (version < 2);
                }
            }
            return true;
        }
        
        public delegate void AccountEntityRowChangeEventHandler(object sender, AccountEntityRowChangeEvent e);
        
        public delegate void ServiceEntityRowChangeEventHandler(object sender, ServiceEntityRowChangeEvent e);
        
        public delegate void SubscriptionEntityRowChangeEventHandler(object sender, SubscriptionEntityRowChangeEvent e);
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AccountEntityDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnId;
            
            private System.Data.DataColumn columnOwnerAccountId;
            
            private System.Data.DataColumn columnGroupId;
            
            private System.Data.DataColumn columnIqid;
            
            private System.Data.DataColumn columnEmail;
            
            private System.Data.DataColumn columnPassword;
            
            private bool m_suspendValidation = false;
            
            public AccountEntityDataTable() {
                this.TableName = "AccountEntity";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal AccountEntityDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected AccountEntityDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal System.Data.DataColumn OwnerAccountIdColumn {
                get {
                    return this.columnOwnerAccountId;
                }
            }
            
            internal System.Data.DataColumn GroupIdColumn {
                get {
                    return this.columnGroupId;
                }
            }
            
            internal System.Data.DataColumn IqidColumn {
                get {
                    return this.columnIqid;
                }
            }
            
            internal System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public AccountEntityRow this[int index] {
                get {
                    return ((AccountEntityRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event IdChangeEventHandler IdChanging;
            
            public event IdChangeEventHandler IdChanged;
            
            public event OwnerAccountIdChangeEventHandler OwnerAccountIdChanging;
            
            public event OwnerAccountIdChangeEventHandler OwnerAccountIdChanged;
            
            public event GroupIdChangeEventHandler GroupIdChanging;
            
            public event GroupIdChangeEventHandler GroupIdChanged;
            
            public event IqidChangeEventHandler IqidChanging;
            
            public event IqidChangeEventHandler IqidChanged;
            
            public event EmailChangeEventHandler EmailChanging;
            
            public event EmailChangeEventHandler EmailChanged;
            
            public event PasswordChangeEventHandler PasswordChanging;
            
            public event PasswordChangeEventHandler PasswordChanged;
            
            public event AccountEntityRowChangeEventHandler AccountEntityRowChanged;
            
            public event AccountEntityRowChangeEventHandler AccountEntityRowChanging;
            
            public event AccountEntityRowChangeEventHandler AccountEntityRowDeleted;
            
            public event AccountEntityRowChangeEventHandler AccountEntityRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "Id")) {
                    if ((this.IdChanging != null)) {
                        this.IdChanging(this, new IdChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "OwnerAccountId")) {
                        if ((this.OwnerAccountIdChanging != null)) {
                            this.OwnerAccountIdChanging(this, new OwnerAccountIdChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "GroupId")) {
                            if ((this.GroupIdChanging != null)) {
                                this.GroupIdChanging(this, new GroupIdChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "Iqid")) {
                                if ((this.IqidChanging != null)) {
                                    this.IqidChanging(this, new IqidChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "Email")) {
                                    if ((this.EmailChanging != null)) {
                                        this.EmailChanging(this, new EmailChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "Password")) {
                                        if ((this.PasswordChanging != null)) {
                                            this.PasswordChanging(this, new PasswordChangeEventArg(e));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "Id")) {
                    if ((this.IdChanged != null)) {
                        this.IdChanged(this, new IdChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "OwnerAccountId")) {
                        if ((this.OwnerAccountIdChanged != null)) {
                            this.OwnerAccountIdChanged(this, new OwnerAccountIdChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "GroupId")) {
                            if ((this.GroupIdChanged != null)) {
                                this.GroupIdChanged(this, new GroupIdChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "Iqid")) {
                                if ((this.IqidChanged != null)) {
                                    this.IqidChanged(this, new IqidChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "Email")) {
                                    if ((this.EmailChanged != null)) {
                                        this.EmailChanged(this, new EmailChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "Password")) {
                                        if ((this.PasswordChanged != null)) {
                                            this.PasswordChanged(this, new PasswordChangeEventArg(e));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddAccountEntityRow(AccountEntityRow row) {
                this.Rows.Add(row);
            }
            
            public AccountEntityRow AddAccountEntityRow(int OwnerAccountId, int GroupId, string Iqid, string Email, string Password) {
                AccountEntityRow rowAccountEntityRow = ((AccountEntityRow)(this.NewRow()));
                rowAccountEntityRow.ItemArray = new object[] {
                        null,
                        OwnerAccountId,
                        GroupId,
                        Iqid,
                        Email,
                        Password};
                this.Rows.Add(rowAccountEntityRow);
                return rowAccountEntityRow;
            }
            
            public AccountEntityRow FindById(int Id) {
                return ((AccountEntityRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                AccountEntityDataTable cln = ((AccountEntityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new AccountEntityDataTable();
            }
            
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnOwnerAccountId = base.Columns["OwnerAccountId"];
                this.columnGroupId = base.Columns["GroupId"];
                this.columnIqid = base.Columns["Iqid"];
                this.columnEmail = base.Columns["Email"];
                this.columnPassword = base.Columns["Password"];
            }
            
            private void InitClass() {
                this.columnId = new System.Data.DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                this.columnId.ExtendedProperties.Add("Generator_ChangedEventName", "IdChanged");
                this.columnId.ExtendedProperties.Add("Generator_ChangingEventName", "IdChanging");
                this.columnId.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Id");
                this.columnId.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "IdColumn");
                this.columnId.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnId");
                this.columnId.ExtendedProperties.Add("Generator_DelegateName", "IdChangeEventHandler");
                this.columnId.ExtendedProperties.Add("Generator_EventArgName", "IdChangeEventArg");
                this.columnId.ExtendedProperties.Add("User_ColumnName", "Id");
                base.Columns.Add(this.columnId);
                this.columnOwnerAccountId = new System.Data.DataColumn("OwnerAccountId", typeof(int), null, System.Data.MappingType.Element);
                this.columnOwnerAccountId.ExtendedProperties.Add("Generator_ChangedEventName", "OwnerAccountIdChanged");
                this.columnOwnerAccountId.ExtendedProperties.Add("Generator_ChangingEventName", "OwnerAccountIdChanging");
                this.columnOwnerAccountId.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "OwnerAccountId");
                this.columnOwnerAccountId.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "OwnerAccountIdColumn");
                this.columnOwnerAccountId.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnOwnerAccountId");
                this.columnOwnerAccountId.ExtendedProperties.Add("Generator_DelegateName", "OwnerAccountIdChangeEventHandler");
                this.columnOwnerAccountId.ExtendedProperties.Add("Generator_EventArgName", "OwnerAccountIdChangeEventArg");
                this.columnOwnerAccountId.ExtendedProperties.Add("User_ColumnName", "OwnerAccountId");
                base.Columns.Add(this.columnOwnerAccountId);
                this.columnGroupId = new System.Data.DataColumn("GroupId", typeof(int), null, System.Data.MappingType.Element);
                this.columnGroupId.ExtendedProperties.Add("Generator_ChangedEventName", "GroupIdChanged");
                this.columnGroupId.ExtendedProperties.Add("Generator_ChangingEventName", "GroupIdChanging");
                this.columnGroupId.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "GroupId");
                this.columnGroupId.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "GroupIdColumn");
                this.columnGroupId.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnGroupId");
                this.columnGroupId.ExtendedProperties.Add("Generator_DelegateName", "GroupIdChangeEventHandler");
                this.columnGroupId.ExtendedProperties.Add("Generator_EventArgName", "GroupIdChangeEventArg");
                this.columnGroupId.ExtendedProperties.Add("User_ColumnName", "GroupId");
                base.Columns.Add(this.columnGroupId);
                this.columnIqid = new System.Data.DataColumn("Iqid", typeof(string), null, System.Data.MappingType.Element);
                this.columnIqid.ExtendedProperties.Add("Generator_ChangedEventName", "IqidChanged");
                this.columnIqid.ExtendedProperties.Add("Generator_ChangingEventName", "IqidChanging");
                this.columnIqid.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Iqid");
                this.columnIqid.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "IqidColumn");
                this.columnIqid.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnIqid");
                this.columnIqid.ExtendedProperties.Add("Generator_DelegateName", "IqidChangeEventHandler");
                this.columnIqid.ExtendedProperties.Add("Generator_EventArgName", "IqidChangeEventArg");
                this.columnIqid.ExtendedProperties.Add("User_ColumnName", "Iqid");
                base.Columns.Add(this.columnIqid);
                this.columnEmail = new System.Data.DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.columnEmail.ExtendedProperties.Add("Generator_ChangedEventName", "EmailChanged");
                this.columnEmail.ExtendedProperties.Add("Generator_ChangingEventName", "EmailChanging");
                this.columnEmail.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Email");
                this.columnEmail.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "EmailColumn");
                this.columnEmail.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnEmail");
                this.columnEmail.ExtendedProperties.Add("Generator_DelegateName", "EmailChangeEventHandler");
                this.columnEmail.ExtendedProperties.Add("Generator_EventArgName", "EmailChangeEventArg");
                this.columnEmail.ExtendedProperties.Add("User_ColumnName", "Email");
                base.Columns.Add(this.columnEmail);
                this.columnPassword = new System.Data.DataColumn("Password", typeof(string), null, System.Data.MappingType.Element);
                this.columnPassword.ExtendedProperties.Add("Generator_ChangedEventName", "PasswordChanged");
                this.columnPassword.ExtendedProperties.Add("Generator_ChangingEventName", "PasswordChanging");
                this.columnPassword.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Password");
                this.columnPassword.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PasswordColumn");
                this.columnPassword.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPassword");
                this.columnPassword.ExtendedProperties.Add("Generator_DelegateName", "PasswordChangeEventHandler");
                this.columnPassword.ExtendedProperties.Add("Generator_EventArgName", "PasswordChangeEventArg");
                this.columnPassword.ExtendedProperties.Add("User_ColumnName", "Password");
                base.Columns.Add(this.columnPassword);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnId.Caption = "id";
                this.columnOwnerAccountId.Caption = "owner_account_id";
                this.columnIqid.AllowDBNull = false;
                this.columnIqid.MaxLength = 128;
                this.columnEmail.AllowDBNull = false;
                this.columnEmail.MaxLength = 128;
                this.columnPassword.AllowDBNull = false;
                this.columnPassword.MaxLength = 128;
                this.Locale = new System.Globalization.CultureInfo("en-US");
                this.ExtendedProperties.Add("Generator_RowClassName", "AccountEntityRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "AccountEntityRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "AccountEntityRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "AccountEntityDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "AccountEntity");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableAccountEntity");
                this.ExtendedProperties.Add("User_TableName", "AccountEntity");
            }
            
            public AccountEntityRow NewAccountEntityRow() {
                return ((AccountEntityRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AccountEntityRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AccountEntityRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AccountEntityRowChanged != null)) {
                    this.AccountEntityRowChanged(this, new AccountEntityRowChangeEvent(((AccountEntityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AccountEntityRowChanging != null)) {
                    this.AccountEntityRowChanging(this, new AccountEntityRowChangeEvent(((AccountEntityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AccountEntityRowDeleted != null)) {
                    this.AccountEntityRowDeleted(this, new AccountEntityRowChangeEvent(((AccountEntityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AccountEntityRowDeleting != null)) {
                    this.AccountEntityRowDeleting(this, new AccountEntityRowChangeEvent(((AccountEntityRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAccountEntityRow(AccountEntityRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataAccess ds = new DataAccess();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AccountEntityDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void IdChangeEventHandler(AccountEntityDataTable sender, IdChangeEventArg e);
            
            public class IdChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public IdChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AccountEntityRow Row {
                    get {
                        return ((AccountEntityRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn IdColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void OwnerAccountIdChangeEventHandler(AccountEntityDataTable sender, OwnerAccountIdChangeEventArg e);
            
            public class OwnerAccountIdChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public OwnerAccountIdChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AccountEntityRow Row {
                    get {
                        return ((AccountEntityRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn OwnerAccountIdColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void GroupIdChangeEventHandler(AccountEntityDataTable sender, GroupIdChangeEventArg e);
            
            public class GroupIdChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public GroupIdChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AccountEntityRow Row {
                    get {
                        return ((AccountEntityRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn GroupIdColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void IqidChangeEventHandler(AccountEntityDataTable sender, IqidChangeEventArg e);
            
            public class IqidChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public IqidChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AccountEntityRow Row {
                    get {
                        return ((AccountEntityRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn IqidColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void EmailChangeEventHandler(AccountEntityDataTable sender, EmailChangeEventArg e);
            
            public class EmailChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public EmailChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AccountEntityRow Row {
                    get {
                        return ((AccountEntityRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn EmailColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void PasswordChangeEventHandler(AccountEntityDataTable sender, PasswordChangeEventArg e);
            
            public class PasswordChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PasswordChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public AccountEntityRow Row {
                    get {
                        return ((AccountEntityRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PasswordColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServiceEntityDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnId;
            
            private System.Data.DataColumn columnAuthorId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnVersion;
            
            private System.Data.DataColumn columnXsd;
            
            private System.Data.DataColumn columnUrlXsd;
            
            private System.Data.DataColumn columnUrlIcon;
            
            private System.Data.DataColumn columnUrlHomepage;
            
            private System.Data.DataColumn columnState;
            
            private bool m_suspendValidation = false;
            
            public ServiceEntityDataTable() {
                this.TableName = "ServiceEntity";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal ServiceEntityDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected ServiceEntityDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal System.Data.DataColumn AuthorIdColumn {
                get {
                    return this.columnAuthorId;
                }
            }
            
            internal System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal System.Data.DataColumn VersionColumn {
                get {
                    return this.columnVersion;
                }
            }
            
            internal System.Data.DataColumn XsdColumn {
                get {
                    return this.columnXsd;
                }
            }
            
            internal System.Data.DataColumn UrlXsdColumn {
                get {
                    return this.columnUrlXsd;
                }
            }
            
            internal System.Data.DataColumn UrlIconColumn {
                get {
                    return this.columnUrlIcon;
                }
            }
            
            internal System.Data.DataColumn UrlHomepageColumn {
                get {
                    return this.columnUrlHomepage;
                }
            }
            
            internal System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public ServiceEntityRow this[int index] {
                get {
                    return ((ServiceEntityRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event IdChangeEventHandler IdChanging;
            
            public event IdChangeEventHandler IdChanged;
            
            public event AuthorIdChangeEventHandler AuthorIdChanging;
            
            public event AuthorIdChangeEventHandler AuthorIdChanged;
            
            public event NameChangeEventHandler NameChanging;
            
            public event NameChangeEventHandler NameChanged;
            
            public event VersionChangeEventHandler VersionChanging;
            
            public event VersionChangeEventHandler VersionChanged;
            
            public event XsdChangeEventHandler XsdChanging;
            
            public event XsdChangeEventHandler XsdChanged;
            
            public event UrlXsdChangeEventHandler UrlXsdChanging;
            
            public event UrlXsdChangeEventHandler UrlXsdChanged;
            
            public event UrlIconChangeEventHandler UrlIconChanging;
            
            public event UrlIconChangeEventHandler UrlIconChanged;
            
            public event UrlHomepageChangeEventHandler UrlHomepageChanging;
            
            public event UrlHomepageChangeEventHandler UrlHomepageChanged;
            
            public event StateChangeEventHandler StateChanging;
            
            public event StateChangeEventHandler StateChanged;
            
            public event ServiceEntityRowChangeEventHandler ServiceEntityRowChanged;
            
            public event ServiceEntityRowChangeEventHandler ServiceEntityRowChanging;
            
            public event ServiceEntityRowChangeEventHandler ServiceEntityRowDeleted;
            
            public event ServiceEntityRowChangeEventHandler ServiceEntityRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "Id")) {
                    if ((this.IdChanging != null)) {
                        this.IdChanging(this, new IdChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "AuthorId")) {
                        if ((this.AuthorIdChanging != null)) {
                            this.AuthorIdChanging(this, new AuthorIdChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "Name")) {
                            if ((this.NameChanging != null)) {
                                this.NameChanging(this, new NameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "Version")) {
                                if ((this.VersionChanging != null)) {
                                    this.VersionChanging(this, new VersionChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "Xsd")) {
                                    if ((this.XsdChanging != null)) {
                                        this.XsdChanging(this, new XsdChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "UrlXsd")) {
                                        if ((this.UrlXsdChanging != null)) {
                                            this.UrlXsdChanging(this, new UrlXsdChangeEventArg(e));
                                        }
                                    }
                                    else {
                                        if ((e.Column.ColumnName == "UrlIcon")) {
                                            if ((this.UrlIconChanging != null)) {
                                                this.UrlIconChanging(this, new UrlIconChangeEventArg(e));
                                            }
                                        }
                                        else {
                                            if ((e.Column.ColumnName == "UrlHomepage")) {
                                                if ((this.UrlHomepageChanging != null)) {
                                                    this.UrlHomepageChanging(this, new UrlHomepageChangeEventArg(e));
                                                }
                                            }
                                            else {
                                                if ((e.Column.ColumnName == "State")) {
                                                    if ((this.StateChanging != null)) {
                                                        this.StateChanging(this, new StateChangeEventArg(e));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "Id")) {
                    if ((this.IdChanged != null)) {
                        this.IdChanged(this, new IdChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "AuthorId")) {
                        if ((this.AuthorIdChanged != null)) {
                            this.AuthorIdChanged(this, new AuthorIdChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "Name")) {
                            if ((this.NameChanged != null)) {
                                this.NameChanged(this, new NameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "Version")) {
                                if ((this.VersionChanged != null)) {
                                    this.VersionChanged(this, new VersionChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "Xsd")) {
                                    if ((this.XsdChanged != null)) {
                                        this.XsdChanged(this, new XsdChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "UrlXsd")) {
                                        if ((this.UrlXsdChanged != null)) {
                                            this.UrlXsdChanged(this, new UrlXsdChangeEventArg(e));
                                        }
                                    }
                                    else {
                                        if ((e.Column.ColumnName == "UrlIcon")) {
                                            if ((this.UrlIconChanged != null)) {
                                                this.UrlIconChanged(this, new UrlIconChangeEventArg(e));
                                            }
                                        }
                                        else {
                                            if ((e.Column.ColumnName == "UrlHomepage")) {
                                                if ((this.UrlHomepageChanged != null)) {
                                                    this.UrlHomepageChanged(this, new UrlHomepageChangeEventArg(e));
                                                }
                                            }
                                            else {
                                                if ((e.Column.ColumnName == "State")) {
                                                    if ((this.StateChanged != null)) {
                                                        this.StateChanged(this, new StateChangeEventArg(e));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddServiceEntityRow(ServiceEntityRow row) {
                this.Rows.Add(row);
            }
            
            public ServiceEntityRow AddServiceEntityRow(int AuthorId, string Name, string Version, string Xsd, string UrlXsd, string UrlIcon, string UrlHomepage, string State) {
                ServiceEntityRow rowServiceEntityRow = ((ServiceEntityRow)(this.NewRow()));
                rowServiceEntityRow.ItemArray = new object[] {
                        null,
                        AuthorId,
                        Name,
                        Version,
                        Xsd,
                        UrlXsd,
                        UrlIcon,
                        UrlHomepage,
                        State};
                this.Rows.Add(rowServiceEntityRow);
                return rowServiceEntityRow;
            }
            
            public ServiceEntityRow FindById(int Id) {
                return ((ServiceEntityRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                ServiceEntityDataTable cln = ((ServiceEntityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new ServiceEntityDataTable();
            }
            
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnAuthorId = base.Columns["AuthorId"];
                this.columnName = base.Columns["Name"];
                this.columnVersion = base.Columns["Version"];
                this.columnXsd = base.Columns["Xsd"];
                this.columnUrlXsd = base.Columns["UrlXsd"];
                this.columnUrlIcon = base.Columns["UrlIcon"];
                this.columnUrlHomepage = base.Columns["UrlHomepage"];
                this.columnState = base.Columns["State"];
            }
            
            private void InitClass() {
                this.columnId = new System.Data.DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                this.columnId.ExtendedProperties.Add("Generator_ChangedEventName", "IdChanged");
                this.columnId.ExtendedProperties.Add("Generator_ChangingEventName", "IdChanging");
                this.columnId.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Id");
                this.columnId.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "IdColumn");
                this.columnId.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnId");
                this.columnId.ExtendedProperties.Add("Generator_DelegateName", "IdChangeEventHandler");
                this.columnId.ExtendedProperties.Add("Generator_EventArgName", "IdChangeEventArg");
                this.columnId.ExtendedProperties.Add("User_ColumnName", "Id");
                base.Columns.Add(this.columnId);
                this.columnAuthorId = new System.Data.DataColumn("AuthorId", typeof(int), null, System.Data.MappingType.Element);
                this.columnAuthorId.ExtendedProperties.Add("Generator_ChangedEventName", "AuthorIdChanged");
                this.columnAuthorId.ExtendedProperties.Add("Generator_ChangingEventName", "AuthorIdChanging");
                this.columnAuthorId.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "AuthorId");
                this.columnAuthorId.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "AuthorIdColumn");
                this.columnAuthorId.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnAuthorId");
                this.columnAuthorId.ExtendedProperties.Add("Generator_DelegateName", "AuthorIdChangeEventHandler");
                this.columnAuthorId.ExtendedProperties.Add("Generator_EventArgName", "AuthorIdChangeEventArg");
                this.columnAuthorId.ExtendedProperties.Add("User_ColumnName", "AuthorId");
                base.Columns.Add(this.columnAuthorId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.columnName.ExtendedProperties.Add("Generator_ChangedEventName", "NameChanged");
                this.columnName.ExtendedProperties.Add("Generator_ChangingEventName", "NameChanging");
                this.columnName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Name");
                this.columnName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "NameColumn");
                this.columnName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnName");
                this.columnName.ExtendedProperties.Add("Generator_DelegateName", "NameChangeEventHandler");
                this.columnName.ExtendedProperties.Add("Generator_EventArgName", "NameChangeEventArg");
                this.columnName.ExtendedProperties.Add("User_ColumnName", "Name");
                base.Columns.Add(this.columnName);
                this.columnVersion = new System.Data.DataColumn("Version", typeof(string), null, System.Data.MappingType.Element);
                this.columnVersion.ExtendedProperties.Add("Generator_ChangedEventName", "VersionChanged");
                this.columnVersion.ExtendedProperties.Add("Generator_ChangingEventName", "VersionChanging");
                this.columnVersion.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Version");
                this.columnVersion.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "VersionColumn");
                this.columnVersion.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnVersion");
                this.columnVersion.ExtendedProperties.Add("Generator_DelegateName", "VersionChangeEventHandler");
                this.columnVersion.ExtendedProperties.Add("Generator_EventArgName", "VersionChangeEventArg");
                this.columnVersion.ExtendedProperties.Add("User_ColumnName", "Version");
                base.Columns.Add(this.columnVersion);
                this.columnXsd = new System.Data.DataColumn("Xsd", typeof(string), null, System.Data.MappingType.Element);
                this.columnXsd.ExtendedProperties.Add("Generator_ChangedEventName", "XsdChanged");
                this.columnXsd.ExtendedProperties.Add("Generator_ChangingEventName", "XsdChanging");
                this.columnXsd.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Xsd");
                this.columnXsd.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "XsdColumn");
                this.columnXsd.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnXsd");
                this.columnXsd.ExtendedProperties.Add("Generator_DelegateName", "XsdChangeEventHandler");
                this.columnXsd.ExtendedProperties.Add("Generator_EventArgName", "XsdChangeEventArg");
                this.columnXsd.ExtendedProperties.Add("User_ColumnName", "Xsd");
                base.Columns.Add(this.columnXsd);
                this.columnUrlXsd = new System.Data.DataColumn("UrlXsd", typeof(string), null, System.Data.MappingType.Element);
                this.columnUrlXsd.ExtendedProperties.Add("Generator_ChangedEventName", "UrlXsdChanged");
                this.columnUrlXsd.ExtendedProperties.Add("Generator_ChangingEventName", "UrlXsdChanging");
                this.columnUrlXsd.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UrlXsd");
                this.columnUrlXsd.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UrlXsdColumn");
                this.columnUrlXsd.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUrlXsd");
                this.columnUrlXsd.ExtendedProperties.Add("Generator_DelegateName", "UrlXsdChangeEventHandler");
                this.columnUrlXsd.ExtendedProperties.Add("Generator_EventArgName", "UrlXsdChangeEventArg");
                this.columnUrlXsd.ExtendedProperties.Add("User_ColumnName", "UrlXsd");
                base.Columns.Add(this.columnUrlXsd);
                this.columnUrlIcon = new System.Data.DataColumn("UrlIcon", typeof(string), null, System.Data.MappingType.Element);
                this.columnUrlIcon.ExtendedProperties.Add("Generator_ChangedEventName", "UrlIconChanged");
                this.columnUrlIcon.ExtendedProperties.Add("Generator_ChangingEventName", "UrlIconChanging");
                this.columnUrlIcon.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UrlIcon");
                this.columnUrlIcon.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UrlIconColumn");
                this.columnUrlIcon.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUrlIcon");
                this.columnUrlIcon.ExtendedProperties.Add("Generator_DelegateName", "UrlIconChangeEventHandler");
                this.columnUrlIcon.ExtendedProperties.Add("Generator_EventArgName", "UrlIconChangeEventArg");
                this.columnUrlIcon.ExtendedProperties.Add("User_ColumnName", "UrlIcon");
                base.Columns.Add(this.columnUrlIcon);
                this.columnUrlHomepage = new System.Data.DataColumn("UrlHomepage", typeof(string), null, System.Data.MappingType.Element);
                this.columnUrlHomepage.ExtendedProperties.Add("Generator_ChangedEventName", "UrlHomepageChanged");
                this.columnUrlHomepage.ExtendedProperties.Add("Generator_ChangingEventName", "UrlHomepageChanging");
                this.columnUrlHomepage.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UrlHomepage");
                this.columnUrlHomepage.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UrlHomepageColumn");
                this.columnUrlHomepage.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUrlHomepage");
                this.columnUrlHomepage.ExtendedProperties.Add("Generator_DelegateName", "UrlHomepageChangeEventHandler");
                this.columnUrlHomepage.ExtendedProperties.Add("Generator_EventArgName", "UrlHomepageChangeEventArg");
                this.columnUrlHomepage.ExtendedProperties.Add("User_ColumnName", "UrlHomepage");
                base.Columns.Add(this.columnUrlHomepage);
                this.columnState = new System.Data.DataColumn("State", typeof(string), null, System.Data.MappingType.Element);
                this.columnState.ExtendedProperties.Add("Generator_ChangedEventName", "StateChanged");
                this.columnState.ExtendedProperties.Add("Generator_ChangingEventName", "StateChanging");
                this.columnState.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "State");
                this.columnState.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "StateColumn");
                this.columnState.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnState");
                this.columnState.ExtendedProperties.Add("Generator_DelegateName", "StateChangeEventHandler");
                this.columnState.ExtendedProperties.Add("Generator_EventArgName", "StateChangeEventArg");
                this.columnState.ExtendedProperties.Add("User_ColumnName", "State");
                base.Columns.Add(this.columnState);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnAuthorId.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 64;
                this.columnVersion.MaxLength = 16;
                this.columnXsd.MaxLength = 2147483647;
                this.columnUrlXsd.MaxLength = 160;
                this.columnUrlIcon.MaxLength = 128;
                this.columnUrlHomepage.MaxLength = 128;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 1;
                this.Locale = new System.Globalization.CultureInfo("en-US");
                this.ExtendedProperties.Add("Generator_RowClassName", "ServiceEntityRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "ServiceEntityRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "ServiceEntityRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "ServiceEntityDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "ServiceEntity");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableServiceEntity");
                this.ExtendedProperties.Add("User_TableName", "ServiceEntity");
            }
            
            public ServiceEntityRow NewServiceEntityRow() {
                return ((ServiceEntityRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServiceEntityRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ServiceEntityRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServiceEntityRowChanged != null)) {
                    this.ServiceEntityRowChanged(this, new ServiceEntityRowChangeEvent(((ServiceEntityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServiceEntityRowChanging != null)) {
                    this.ServiceEntityRowChanging(this, new ServiceEntityRowChangeEvent(((ServiceEntityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServiceEntityRowDeleted != null)) {
                    this.ServiceEntityRowDeleted(this, new ServiceEntityRowChangeEvent(((ServiceEntityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServiceEntityRowDeleting != null)) {
                    this.ServiceEntityRowDeleting(this, new ServiceEntityRowChangeEvent(((ServiceEntityRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveServiceEntityRow(ServiceEntityRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataAccess ds = new DataAccess();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServiceEntityDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void IdChangeEventHandler(ServiceEntityDataTable sender, IdChangeEventArg e);
            
            public class IdChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public IdChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ServiceEntityRow Row {
                    get {
                        return ((ServiceEntityRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn IdColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void AuthorIdChangeEventHandler(ServiceEntityDataTable sender, AuthorIdChangeEventArg e);
            
            public class AuthorIdChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public AuthorIdChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ServiceEntityRow Row {
                    get {
                        return ((ServiceEntityRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn AuthorIdColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void NameChangeEventHandler(ServiceEntityDataTable sender, NameChangeEventArg e);
            
            public class NameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public NameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ServiceEntityRow Row {
                    get {
                        return ((ServiceEntityRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn NameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void VersionChangeEventHandler(ServiceEntityDataTable sender, VersionChangeEventArg e);
            
            public class VersionChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public VersionChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ServiceEntityRow Row {
                    get {
                        return ((ServiceEntityRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn VersionColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void XsdChangeEventHandler(ServiceEntityDataTable sender, XsdChangeEventArg e);
            
            public class XsdChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public XsdChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ServiceEntityRow Row {
                    get {
                        return ((ServiceEntityRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn XsdColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void UrlXsdChangeEventHandler(ServiceEntityDataTable sender, UrlXsdChangeEventArg e);
            
            public class UrlXsdChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public UrlXsdChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ServiceEntityRow Row {
                    get {
                        return ((ServiceEntityRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn UrlXsdColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void UrlIconChangeEventHandler(ServiceEntityDataTable sender, UrlIconChangeEventArg e);
            
            public class UrlIconChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public UrlIconChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ServiceEntityRow Row {
                    get {
                        return ((ServiceEntityRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn UrlIconColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void UrlHomepageChangeEventHandler(ServiceEntityDataTable sender, UrlHomepageChangeEventArg e);
            
            public class UrlHomepageChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public UrlHomepageChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ServiceEntityRow Row {
                    get {
                        return ((ServiceEntityRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn UrlHomepageColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void StateChangeEventHandler(ServiceEntityDataTable sender, StateChangeEventArg e);
            
            public class StateChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public StateChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ServiceEntityRow Row {
                    get {
                        return ((ServiceEntityRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn StateColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubscriptionEntityDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnId;
            
            private System.Data.DataColumn columnAccountId;
            
            private System.Data.DataColumn columnServiceId;
            
            private System.Data.DataColumn columnXml;
            
            private bool m_suspendValidation = false;
            
            public SubscriptionEntityDataTable() {
                this.TableName = "SubscriptionEntity";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal SubscriptionEntityDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected SubscriptionEntityDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal System.Data.DataColumn AccountIdColumn {
                get {
                    return this.columnAccountId;
                }
            }
            
            internal System.Data.DataColumn ServiceIdColumn {
                get {
                    return this.columnServiceId;
                }
            }
            
            internal System.Data.DataColumn XmlColumn {
                get {
                    return this.columnXml;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public SubscriptionEntityRow this[int index] {
                get {
                    return ((SubscriptionEntityRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event IdChangeEventHandler IdChanging;
            
            public event IdChangeEventHandler IdChanged;
            
            public event AccountIdChangeEventHandler AccountIdChanging;
            
            public event AccountIdChangeEventHandler AccountIdChanged;
            
            public event ServiceIdChangeEventHandler ServiceIdChanging;
            
            public event ServiceIdChangeEventHandler ServiceIdChanged;
            
            public event XmlChangeEventHandler XmlChanging;
            
            public event XmlChangeEventHandler XmlChanged;
            
            public event SubscriptionEntityRowChangeEventHandler SubscriptionEntityRowChanged;
            
            public event SubscriptionEntityRowChangeEventHandler SubscriptionEntityRowChanging;
            
            public event SubscriptionEntityRowChangeEventHandler SubscriptionEntityRowDeleted;
            
            public event SubscriptionEntityRowChangeEventHandler SubscriptionEntityRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "Id")) {
                    if ((this.IdChanging != null)) {
                        this.IdChanging(this, new IdChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "AccountId")) {
                        if ((this.AccountIdChanging != null)) {
                            this.AccountIdChanging(this, new AccountIdChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "ServiceId")) {
                            if ((this.ServiceIdChanging != null)) {
                                this.ServiceIdChanging(this, new ServiceIdChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "Xml")) {
                                if ((this.XmlChanging != null)) {
                                    this.XmlChanging(this, new XmlChangeEventArg(e));
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "Id")) {
                    if ((this.IdChanged != null)) {
                        this.IdChanged(this, new IdChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "AccountId")) {
                        if ((this.AccountIdChanged != null)) {
                            this.AccountIdChanged(this, new AccountIdChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "ServiceId")) {
                            if ((this.ServiceIdChanged != null)) {
                                this.ServiceIdChanged(this, new ServiceIdChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "Xml")) {
                                if ((this.XmlChanged != null)) {
                                    this.XmlChanged(this, new XmlChangeEventArg(e));
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddSubscriptionEntityRow(SubscriptionEntityRow row) {
                this.Rows.Add(row);
            }
            
            public SubscriptionEntityRow AddSubscriptionEntityRow(System.Guid Id, int AccountId, int ServiceId, string Xml) {
                SubscriptionEntityRow rowSubscriptionEntityRow = ((SubscriptionEntityRow)(this.NewRow()));
                rowSubscriptionEntityRow.ItemArray = new object[] {
                        Id,
                        AccountId,
                        ServiceId,
                        Xml};
                this.Rows.Add(rowSubscriptionEntityRow);
                return rowSubscriptionEntityRow;
            }
            
            public SubscriptionEntityRow FindById(System.Guid Id) {
                return ((SubscriptionEntityRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                SubscriptionEntityDataTable cln = ((SubscriptionEntityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new SubscriptionEntityDataTable();
            }
            
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnAccountId = base.Columns["AccountId"];
                this.columnServiceId = base.Columns["ServiceId"];
                this.columnXml = base.Columns["Xml"];
            }
            
            private void InitClass() {
                this.columnId = new System.Data.DataColumn("Id", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.columnId.ExtendedProperties.Add("Generator_ChangedEventName", "IdChanged");
                this.columnId.ExtendedProperties.Add("Generator_ChangingEventName", "IdChanging");
                this.columnId.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Id");
                this.columnId.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "IdColumn");
                this.columnId.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnId");
                this.columnId.ExtendedProperties.Add("Generator_DelegateName", "IdChangeEventHandler");
                this.columnId.ExtendedProperties.Add("Generator_EventArgName", "IdChangeEventArg");
                this.columnId.ExtendedProperties.Add("User_ColumnName", "Id");
                base.Columns.Add(this.columnId);
                this.columnAccountId = new System.Data.DataColumn("AccountId", typeof(int), null, System.Data.MappingType.Element);
                this.columnAccountId.ExtendedProperties.Add("Generator_ChangedEventName", "AccountIdChanged");
                this.columnAccountId.ExtendedProperties.Add("Generator_ChangingEventName", "AccountIdChanging");
                this.columnAccountId.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "AccountId");
                this.columnAccountId.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "AccountIdColumn");
                this.columnAccountId.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnAccountId");
                this.columnAccountId.ExtendedProperties.Add("Generator_DelegateName", "AccountIdChangeEventHandler");
                this.columnAccountId.ExtendedProperties.Add("Generator_EventArgName", "AccountIdChangeEventArg");
                this.columnAccountId.ExtendedProperties.Add("User_ColumnName", "AccountId");
                base.Columns.Add(this.columnAccountId);
                this.columnServiceId = new System.Data.DataColumn("ServiceId", typeof(int), null, System.Data.MappingType.Element);
                this.columnServiceId.ExtendedProperties.Add("Generator_ChangedEventName", "ServiceIdChanged");
                this.columnServiceId.ExtendedProperties.Add("Generator_ChangingEventName", "ServiceIdChanging");
                this.columnServiceId.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ServiceId");
                this.columnServiceId.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ServiceIdColumn");
                this.columnServiceId.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnServiceId");
                this.columnServiceId.ExtendedProperties.Add("Generator_DelegateName", "ServiceIdChangeEventHandler");
                this.columnServiceId.ExtendedProperties.Add("Generator_EventArgName", "ServiceIdChangeEventArg");
                this.columnServiceId.ExtendedProperties.Add("User_ColumnName", "ServiceId");
                base.Columns.Add(this.columnServiceId);
                this.columnXml = new System.Data.DataColumn("Xml", typeof(string), null, System.Data.MappingType.Element);
                this.columnXml.ExtendedProperties.Add("Generator_ChangedEventName", "XmlChanged");
                this.columnXml.ExtendedProperties.Add("Generator_ChangingEventName", "XmlChanging");
                this.columnXml.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Xml");
                this.columnXml.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "XmlColumn");
                this.columnXml.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnXml");
                this.columnXml.ExtendedProperties.Add("Generator_DelegateName", "XmlChangeEventHandler");
                this.columnXml.ExtendedProperties.Add("Generator_EventArgName", "XmlChangeEventArg");
                this.columnXml.ExtendedProperties.Add("User_ColumnName", "Xml");
                base.Columns.Add(this.columnXml);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnAccountId.AllowDBNull = false;
                this.columnServiceId.AllowDBNull = false;
                this.columnXml.MaxLength = 2147483647;
                this.Locale = new System.Globalization.CultureInfo("en-US");
                this.ExtendedProperties.Add("Generator_RowClassName", "SubscriptionEntityRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "SubscriptionEntityRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "SubscriptionEntityRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "SubscriptionEntityDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "SubscriptionEntity");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableSubscriptionEntity");
                this.ExtendedProperties.Add("User_TableName", "SubscriptionEntity");
            }
            
            public SubscriptionEntityRow NewSubscriptionEntityRow() {
                return ((SubscriptionEntityRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SubscriptionEntityRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SubscriptionEntityRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubscriptionEntityRowChanged != null)) {
                    this.SubscriptionEntityRowChanged(this, new SubscriptionEntityRowChangeEvent(((SubscriptionEntityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubscriptionEntityRowChanging != null)) {
                    this.SubscriptionEntityRowChanging(this, new SubscriptionEntityRowChangeEvent(((SubscriptionEntityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubscriptionEntityRowDeleted != null)) {
                    this.SubscriptionEntityRowDeleted(this, new SubscriptionEntityRowChangeEvent(((SubscriptionEntityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubscriptionEntityRowDeleting != null)) {
                    this.SubscriptionEntityRowDeleting(this, new SubscriptionEntityRowChangeEvent(((SubscriptionEntityRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSubscriptionEntityRow(SubscriptionEntityRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataAccess ds = new DataAccess();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubscriptionEntityDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void IdChangeEventHandler(SubscriptionEntityDataTable sender, IdChangeEventArg e);
            
            public class IdChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public IdChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public SubscriptionEntityRow Row {
                    get {
                        return ((SubscriptionEntityRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn IdColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public System.Guid ProposedValue {
                    get {
                        return ((System.Guid)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((System.Guid)(value));
                    }
                }
            }
            
            public delegate void AccountIdChangeEventHandler(SubscriptionEntityDataTable sender, AccountIdChangeEventArg e);
            
            public class AccountIdChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public AccountIdChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public SubscriptionEntityRow Row {
                    get {
                        return ((SubscriptionEntityRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn AccountIdColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void ServiceIdChangeEventHandler(SubscriptionEntityDataTable sender, ServiceIdChangeEventArg e);
            
            public class ServiceIdChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ServiceIdChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public SubscriptionEntityRow Row {
                    get {
                        return ((SubscriptionEntityRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ServiceIdColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void XmlChangeEventHandler(SubscriptionEntityDataTable sender, XmlChangeEventArg e);
            
            public class XmlChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public XmlChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public SubscriptionEntityRow Row {
                    get {
                        return ((SubscriptionEntityRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn XmlColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        public class AccountEntityRow : System.Data.DataRow {
            
            private AccountEntityDataTable tableAccountEntity;
            
            internal AccountEntityRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAccountEntity = ((AccountEntityDataTable)(this.Table));
            }
            
            public int Id {
                get {
                    return ((int)(this[this.tableAccountEntity.IdColumn]));
                }
                set {
                    this[this.tableAccountEntity.IdColumn] = value;
                }
            }
            
            public int OwnerAccountId {
                get {
                    try {
                        return ((int)(this[this.tableAccountEntity.OwnerAccountIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableAccountEntity.OwnerAccountIdColumn] = value;
                }
            }
            
            public int GroupId {
                get {
                    try {
                        return ((int)(this[this.tableAccountEntity.GroupIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableAccountEntity.GroupIdColumn] = value;
                }
            }
            
            public string Iqid {
                get {
                    return ((string)(this[this.tableAccountEntity.IqidColumn]));
                }
                set {
                    this[this.tableAccountEntity.IqidColumn] = value;
                }
            }
            
            public string Email {
                get {
                    return ((string)(this[this.tableAccountEntity.EmailColumn]));
                }
                set {
                    this[this.tableAccountEntity.EmailColumn] = value;
                }
            }
            
            public string Password {
                get {
                    return ((string)(this[this.tableAccountEntity.PasswordColumn]));
                }
                set {
                    this[this.tableAccountEntity.PasswordColumn] = value;
                }
            }
            
            public bool IsOwnerAccountIdNull() {
                return this.IsNull(this.tableAccountEntity.OwnerAccountIdColumn);
            }
            
            public void SetOwnerAccountIdNull() {
                this[this.tableAccountEntity.OwnerAccountIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsGroupIdNull() {
                return this.IsNull(this.tableAccountEntity.GroupIdColumn);
            }
            
            public void SetGroupIdNull() {
                this[this.tableAccountEntity.GroupIdColumn] = System.Convert.DBNull;
            }
        }
        
        public class ServiceEntityRow : System.Data.DataRow {
            
            private ServiceEntityDataTable tableServiceEntity;
            
            internal ServiceEntityRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServiceEntity = ((ServiceEntityDataTable)(this.Table));
            }
            
            public int Id {
                get {
                    return ((int)(this[this.tableServiceEntity.IdColumn]));
                }
                set {
                    this[this.tableServiceEntity.IdColumn] = value;
                }
            }
            
            public int AuthorId {
                get {
                    return ((int)(this[this.tableServiceEntity.AuthorIdColumn]));
                }
                set {
                    this[this.tableServiceEntity.AuthorIdColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableServiceEntity.NameColumn]));
                }
                set {
                    this[this.tableServiceEntity.NameColumn] = value;
                }
            }
            
            public string Version {
                get {
                    try {
                        return ((string)(this[this.tableServiceEntity.VersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableServiceEntity.VersionColumn] = value;
                }
            }
            
            public string Xsd {
                get {
                    try {
                        return ((string)(this[this.tableServiceEntity.XsdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableServiceEntity.XsdColumn] = value;
                }
            }
            
            public string UrlXsd {
                get {
                    try {
                        return ((string)(this[this.tableServiceEntity.UrlXsdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableServiceEntity.UrlXsdColumn] = value;
                }
            }
            
            public string UrlIcon {
                get {
                    try {
                        return ((string)(this[this.tableServiceEntity.UrlIconColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableServiceEntity.UrlIconColumn] = value;
                }
            }
            
            public string UrlHomepage {
                get {
                    try {
                        return ((string)(this[this.tableServiceEntity.UrlHomepageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableServiceEntity.UrlHomepageColumn] = value;
                }
            }
            
            public string State {
                get {
                    return ((string)(this[this.tableServiceEntity.StateColumn]));
                }
                set {
                    this[this.tableServiceEntity.StateColumn] = value;
                }
            }
            
            public bool IsVersionNull() {
                return this.IsNull(this.tableServiceEntity.VersionColumn);
            }
            
            public void SetVersionNull() {
                this[this.tableServiceEntity.VersionColumn] = System.Convert.DBNull;
            }
            
            public bool IsXsdNull() {
                return this.IsNull(this.tableServiceEntity.XsdColumn);
            }
            
            public void SetXsdNull() {
                this[this.tableServiceEntity.XsdColumn] = System.Convert.DBNull;
            }
            
            public bool IsUrlXsdNull() {
                return this.IsNull(this.tableServiceEntity.UrlXsdColumn);
            }
            
            public void SetUrlXsdNull() {
                this[this.tableServiceEntity.UrlXsdColumn] = System.Convert.DBNull;
            }
            
            public bool IsUrlIconNull() {
                return this.IsNull(this.tableServiceEntity.UrlIconColumn);
            }
            
            public void SetUrlIconNull() {
                this[this.tableServiceEntity.UrlIconColumn] = System.Convert.DBNull;
            }
            
            public bool IsUrlHomepageNull() {
                return this.IsNull(this.tableServiceEntity.UrlHomepageColumn);
            }
            
            public void SetUrlHomepageNull() {
                this[this.tableServiceEntity.UrlHomepageColumn] = System.Convert.DBNull;
            }
        }
        
        public class SubscriptionEntityRow : System.Data.DataRow {
            
            private SubscriptionEntityDataTable tableSubscriptionEntity;
            
            internal SubscriptionEntityRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubscriptionEntity = ((SubscriptionEntityDataTable)(this.Table));
            }
            
            public System.Guid Id {
                get {
                    return ((System.Guid)(this[this.tableSubscriptionEntity.IdColumn]));
                }
                set {
                    this[this.tableSubscriptionEntity.IdColumn] = value;
                }
            }
            
            public int AccountId {
                get {
                    return ((int)(this[this.tableSubscriptionEntity.AccountIdColumn]));
                }
                set {
                    this[this.tableSubscriptionEntity.AccountIdColumn] = value;
                }
            }
            
            public int ServiceId {
                get {
                    return ((int)(this[this.tableSubscriptionEntity.ServiceIdColumn]));
                }
                set {
                    this[this.tableSubscriptionEntity.ServiceIdColumn] = value;
                }
            }
            
            public string Xml {
                get {
                    try {
                        return ((string)(this[this.tableSubscriptionEntity.XmlColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableSubscriptionEntity.XmlColumn] = value;
                }
            }
            
            public bool IsXmlNull() {
                return this.IsNull(this.tableSubscriptionEntity.XmlColumn);
            }
            
            public void SetXmlNull() {
                this[this.tableSubscriptionEntity.XmlColumn] = System.Convert.DBNull;
            }
        }
        
        public class AccountEntityRowChangeEvent : System.EventArgs {
            
            private AccountEntityRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public AccountEntityRowChangeEvent(AccountEntityRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AccountEntityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class ServiceEntityRowChangeEvent : System.EventArgs {
            
            private ServiceEntityRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public ServiceEntityRowChangeEvent(ServiceEntityRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ServiceEntityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class SubscriptionEntityRowChangeEvent : System.EventArgs {
            
            private SubscriptionEntityRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public SubscriptionEntityRowChangeEvent(SubscriptionEntityRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SubscriptionEntityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    public interface IAccountEntityTableAdapter {
        
        int Fill(DataAccess dataSet, int @id);
        
        object Fill(DataAccess dataSet, object @id);
        
        int Fill(DataAccess.AccountEntityDataTable dataTable, int @id);
        
        object Fill(DataAccess.AccountEntityDataTable dataTable, object @id);
        
        DataAccess.AccountEntityDataTable GetData(int @id);
        
        DataAccess.AccountEntityDataTable GetData(object @id);
        
        int Update(DataAccess dataSet);
        
        int Update(DataAccess.AccountEntityDataTable dataTable);
        
        int Update(System.Data.DataRow[] dataRows);
        
        int Update(System.Data.DataRow dataRow);
    }
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    public partial class AccountEntityTableAdapter : System.ComponentModel.Component, IAccountEntityTableAdapter {
        
        private System.Data.SqlClient.SqlCommand m_DeleteCommand;
        
        private System.Data.SqlClient.SqlCommand m_InsertCommand;
        
        private System.Data.SqlClient.SqlCommand m_UpdateCommand;
        
        private System.Data.SqlClient.SqlDataAdapter m_adapter;
        
        private System.Data.SqlClient.SqlConnection m_connection;
        
        private System.Data.IDbCommand[] m_commandCollection;
        
        private System.Data.SqlClient.SqlTransaction m_transaction;
        
        private bool m_clearBeforeFill = true;
        
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this.m_adapter == null)) {
                    this.InitAdapter();
                }
                return this.m_adapter;
            }
        }
        
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this.m_connection == null)) {
                    this.InitConnection();
                }
                return this.m_connection;
            }
        }
        
        internal System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this.m_commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this.m_commandCollection;
            }
        }
        
        internal System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this.m_transaction;
            }
            set {
                System.Data.SqlClient.SqlTransaction oldTransaction = this.m_transaction;
                this.m_transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Transaction == oldTransaction)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    if ((this.Adapter.DeleteCommand.Transaction == oldTransaction)) {
                        this.Adapter.DeleteCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    if ((this.Adapter.InsertCommand.Transaction == oldTransaction)) {
                        this.Adapter.InsertCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    if ((this.Adapter.UpdateCommand.Transaction == oldTransaction)) {
                        this.Adapter.UpdateCommand.Transaction = this.m_transaction;
                    }
                }
            }
        }
        
        public bool ClearBeforeFill {
            get {
                return this.m_clearBeforeFill;
            }
            set {
                this.m_clearBeforeFill = value;
            }
        }
        
        private void InitAdapter() {
            this.m_adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AccountEntity";
            tableMapping.ColumnMappings.Add("id", "Id");
            tableMapping.ColumnMappings.Add("owner_account_id", "OwnerAccountId");
            tableMapping.ColumnMappings.Add("group_id", "GroupId");
            tableMapping.ColumnMappings.Add("iqid", "Iqid");
            tableMapping.ColumnMappings.Add("email", "Email");
            tableMapping.ColumnMappings.Add("password", "Password");
            this.m_adapter.TableMappings.Add(tableMapping);
            this.m_adapter.SelectCommand = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).CommandText = "dbo.iqReadAccount";
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).CommandText = "dbo.iqDeleteAccount";
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).CommandText = "dbo.iqCreateAccount";
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@owner_account_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "owner_account_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@group_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "group_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@iqid", System.Data.SqlDbType.NVarChar, 128, System.Data.ParameterDirection.Input, 0, 0, "iqid", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@email", System.Data.SqlDbType.NVarChar, 128, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@password", System.Data.SqlDbType.NVarChar, 128, System.Data.ParameterDirection.Input, 0, 0, "password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).CommandText = "dbo.iqUpdateAccount";
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@owner_account_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "owner_account_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@group_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "group_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@iqid", System.Data.SqlDbType.NVarChar, 128, System.Data.ParameterDirection.Input, 0, 0, "iqid", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@email", System.Data.SqlDbType.NVarChar, 128, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@password", System.Data.SqlDbType.NVarChar, 128, System.Data.ParameterDirection.Input, 0, 0, "password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        private void InitConnection() {
            this.m_connection = new System.Data.SqlClient.SqlConnection();
            string csValue = null;
            System.Type settingsType = null;
            System.ComponentModel.Design.ITypeResolutionService trs = null;
            if ((this.Site != null)) {
                trs = ((System.ComponentModel.Design.ITypeResolutionService)(this.Site.GetService(typeof(System.ComponentModel.Design.ITypeResolutionService))));
            }
            if ((trs != null)) {
                settingsType = trs.GetType("Commanigy.Iquomi.Properties.Settings");
            }
            else {
                settingsType = System.Type.GetType("Commanigy.Iquomi.Properties.Settings");
            }
            if ((settingsType != null)) {
                System.Reflection.PropertyInfo diProperty = settingsType.GetProperty("Value");
                System.Reflection.PropertyInfo csProperty = settingsType.GetProperty("iquomiConnection");
                object diValue = diProperty.GetValue(null, null);
                csValue = csProperty.GetValue(diValue, null).ToString();
            }
            this.m_connection.ConnectionString = csValue;
        }
        
        private void InitCommandCollection() {
            this.m_commandCollection = new System.Data.IDbCommand[1];
            this.m_commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_commandCollection[0])).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_commandCollection[0])).CommandText = "dbo.iqReadAccount";
            ((System.Data.SqlClient.SqlCommand)(this.m_commandCollection[0])).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this.m_commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        public virtual int Fill(DataAccess dataSet, int @id) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(@id));
            if ((this.m_clearBeforeFill == true)) {
                dataSet.AccountEntity.Clear();
            }
            this.Adapter.Fill(dataSet);
            if ((this.Adapter.SelectCommand.Parameters[0].Value.GetType() == typeof(System.DBNull))) {
                throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", null);
            }
            else {
                return ((int)(this.Adapter.SelectCommand.Parameters[0].Value));
            }
        }
        
        public virtual object Fill(DataAccess dataSet, object @id) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            this.Adapter.SelectCommand.Parameters[1].Value = ((object)(@id));
            if ((this.m_clearBeforeFill == true)) {
                dataSet.AccountEntity.Clear();
            }
            this.Adapter.Fill(dataSet);
            if ((this.Adapter.SelectCommand.Parameters[0].Value.GetType() == typeof(System.DBNull))) {
                return System.DBNull.Value;
            }
            else {
                return this.Adapter.SelectCommand.Parameters[0].Value;
            }
        }
        
        public virtual int Fill(DataAccess.AccountEntityDataTable dataTable, int @id) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(@id));
            if ((this.m_clearBeforeFill == true)) {
                dataTable.Clear();
            }
            this.Adapter.Fill(dataTable);
            if ((this.Adapter.SelectCommand.Parameters[0].Value.GetType() == typeof(System.DBNull))) {
                throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", null);
            }
            else {
                return ((int)(this.Adapter.SelectCommand.Parameters[0].Value));
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual object Fill(DataAccess.AccountEntityDataTable dataTable, object @id) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            this.Adapter.SelectCommand.Parameters[1].Value = ((object)(@id));
            if ((this.m_clearBeforeFill == true)) {
                dataTable.Clear();
            }
            this.Adapter.Fill(dataTable);
            if ((this.Adapter.SelectCommand.Parameters[0].Value.GetType() == typeof(System.DBNull))) {
                return System.DBNull.Value;
            }
            else {
                return this.Adapter.SelectCommand.Parameters[0].Value;
            }
        }
        
        public virtual DataAccess.AccountEntityDataTable GetData(int @id) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(@id));
            DataAccess.AccountEntityDataTable dataTable = new DataAccess.AccountEntityDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataAccess.AccountEntityDataTable GetData(object @id) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            this.Adapter.SelectCommand.Parameters[1].Value = ((object)(@id));
            DataAccess.AccountEntityDataTable dataTable = new DataAccess.AccountEntityDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        public virtual int Update(DataAccess dataSet) {
            return this.Adapter.Update(dataSet, "AccountEntity");
        }
        
        public virtual int Update(DataAccess.AccountEntityDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
    }
    
    public interface IServiceEntityTableAdapter {
        
        int Fill(DataAccess dataSet, int @id, int @language_id);
        
        object Fill(DataAccess dataSet, object @id, object @language_id);
        
        int Fill(DataAccess.ServiceEntityDataTable dataTable, int @id, int @language_id);
        
        object Fill(DataAccess.ServiceEntityDataTable dataTable, object @id, object @language_id);
        
        DataAccess.ServiceEntityDataTable GetData(int @id, int @language_id);
        
        DataAccess.ServiceEntityDataTable GetData(object @id, object @language_id);
        
        int Update(DataAccess dataSet);
        
        int Update(DataAccess.ServiceEntityDataTable dataTable);
        
        int Update(System.Data.DataRow[] dataRows);
        
        int Update(System.Data.DataRow dataRow);
    }
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    public partial class ServiceEntityTableAdapter : System.ComponentModel.Component, IServiceEntityTableAdapter {
        
        private System.Data.SqlClient.SqlCommand m_DeleteCommand;
        
        private System.Data.SqlClient.SqlCommand m_InsertCommand;
        
        private System.Data.SqlClient.SqlCommand m_UpdateCommand;
        
        private System.Data.SqlClient.SqlDataAdapter m_adapter;
        
        private System.Data.SqlClient.SqlConnection m_connection;
        
        private System.Data.IDbCommand[] m_commandCollection;
        
        private System.Data.SqlClient.SqlTransaction m_transaction;
        
        private bool m_clearBeforeFill = true;
        
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this.m_adapter == null)) {
                    this.InitAdapter();
                }
                return this.m_adapter;
            }
        }
        
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this.m_connection == null)) {
                    this.InitConnection();
                }
                return this.m_connection;
            }
        }
        
        internal System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this.m_commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this.m_commandCollection;
            }
        }
        
        internal System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this.m_transaction;
            }
            set {
                System.Data.SqlClient.SqlTransaction oldTransaction = this.m_transaction;
                this.m_transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Transaction == oldTransaction)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    if ((this.Adapter.DeleteCommand.Transaction == oldTransaction)) {
                        this.Adapter.DeleteCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    if ((this.Adapter.InsertCommand.Transaction == oldTransaction)) {
                        this.Adapter.InsertCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    if ((this.Adapter.UpdateCommand.Transaction == oldTransaction)) {
                        this.Adapter.UpdateCommand.Transaction = this.m_transaction;
                    }
                }
            }
        }
        
        public bool ClearBeforeFill {
            get {
                return this.m_clearBeforeFill;
            }
            set {
                this.m_clearBeforeFill = value;
            }
        }
        
        private void InitAdapter() {
            this.m_adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ServiceEntity";
            tableMapping.ColumnMappings.Add("id", "Id");
            tableMapping.ColumnMappings.Add("author_id", "AuthorId");
            tableMapping.ColumnMappings.Add("name", "Name");
            tableMapping.ColumnMappings.Add("version", "Version");
            tableMapping.ColumnMappings.Add("xsd", "Xsd");
            tableMapping.ColumnMappings.Add("url_xsd", "UrlXsd");
            tableMapping.ColumnMappings.Add("url_icon", "UrlIcon");
            tableMapping.ColumnMappings.Add("url_homepage", "UrlHomepage");
            tableMapping.ColumnMappings.Add("state", "State");
            this.m_adapter.TableMappings.Add(tableMapping);
            this.m_adapter.SelectCommand = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).CommandText = "dbo.iqReadService";
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@language_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).CommandText = "dbo.iqDeleteService";
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).CommandText = "dbo.iqCreateService";
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@author_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "author_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.NVarChar, 64, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@version", System.Data.SqlDbType.NVarChar, 16, System.Data.ParameterDirection.Input, 0, 0, "version", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@xsd", System.Data.SqlDbType.VarChar, 16, System.Data.ParameterDirection.Input, 0, 0, "xsd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@url_xsd", System.Data.SqlDbType.NVarChar, 320, System.Data.ParameterDirection.Input, 0, 0, "url_xsd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@url_icon", System.Data.SqlDbType.NVarChar, 128, System.Data.ParameterDirection.Input, 0, 0, "url_icon", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@url_homepage", System.Data.SqlDbType.NVarChar, 128, System.Data.ParameterDirection.Input, 0, 0, "url_homepage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@state", System.Data.SqlDbType.Char, 1, System.Data.ParameterDirection.Input, 0, 0, "state", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).CommandText = "dbo.iqUpdateService";
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@author_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "author_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.NVarChar, 64, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@version", System.Data.SqlDbType.NVarChar, 16, System.Data.ParameterDirection.Input, 0, 0, "version", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@xsd", System.Data.SqlDbType.VarChar, 16, System.Data.ParameterDirection.Input, 0, 0, "xsd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@url_xsd", System.Data.SqlDbType.NVarChar, 320, System.Data.ParameterDirection.Input, 0, 0, "url_xsd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@url_icon", System.Data.SqlDbType.NVarChar, 128, System.Data.ParameterDirection.Input, 0, 0, "url_icon", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@url_homepage", System.Data.SqlDbType.NVarChar, 128, System.Data.ParameterDirection.Input, 0, 0, "url_homepage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@state", System.Data.SqlDbType.Char, 1, System.Data.ParameterDirection.Input, 0, 0, "state", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        private void InitConnection() {
            this.m_connection = new System.Data.SqlClient.SqlConnection();
            string csValue = null;
            System.Type settingsType = null;
            System.ComponentModel.Design.ITypeResolutionService trs = null;
            if ((this.Site != null)) {
                trs = ((System.ComponentModel.Design.ITypeResolutionService)(this.Site.GetService(typeof(System.ComponentModel.Design.ITypeResolutionService))));
            }
            if ((trs != null)) {
                settingsType = trs.GetType("Commanigy.Iquomi.Properties.Settings");
            }
            else {
                settingsType = System.Type.GetType("Commanigy.Iquomi.Properties.Settings");
            }
            if ((settingsType != null)) {
                System.Reflection.PropertyInfo diProperty = settingsType.GetProperty("Value");
                System.Reflection.PropertyInfo csProperty = settingsType.GetProperty("iquomiConnection");
                object diValue = diProperty.GetValue(null, null);
                csValue = csProperty.GetValue(diValue, null).ToString();
            }
            this.m_connection.ConnectionString = csValue;
        }
        
        private void InitCommandCollection() {
            this.m_commandCollection = new System.Data.IDbCommand[1];
            this.m_commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_commandCollection[0])).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_commandCollection[0])).CommandText = "dbo.iqReadService";
            ((System.Data.SqlClient.SqlCommand)(this.m_commandCollection[0])).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this.m_commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@language_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        public virtual int Fill(DataAccess dataSet, int @id, int @language_id) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(@id));
            this.Adapter.SelectCommand.Parameters[2].Value = ((int)(@language_id));
            if ((this.m_clearBeforeFill == true)) {
                dataSet.ServiceEntity.Clear();
            }
            this.Adapter.Fill(dataSet);
            if ((this.Adapter.SelectCommand.Parameters[0].Value.GetType() == typeof(System.DBNull))) {
                throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", null);
            }
            else {
                return ((int)(this.Adapter.SelectCommand.Parameters[0].Value));
            }
        }
        
        public virtual object Fill(DataAccess dataSet, object @id, object @language_id) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            this.Adapter.SelectCommand.Parameters[1].Value = ((object)(@id));
            this.Adapter.SelectCommand.Parameters[2].Value = ((object)(@language_id));
            if ((this.m_clearBeforeFill == true)) {
                dataSet.ServiceEntity.Clear();
            }
            this.Adapter.Fill(dataSet);
            if ((this.Adapter.SelectCommand.Parameters[0].Value.GetType() == typeof(System.DBNull))) {
                return System.DBNull.Value;
            }
            else {
                return this.Adapter.SelectCommand.Parameters[0].Value;
            }
        }
        
        public virtual int Fill(DataAccess.ServiceEntityDataTable dataTable, int @id, int @language_id) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(@id));
            this.Adapter.SelectCommand.Parameters[2].Value = ((int)(@language_id));
            if ((this.m_clearBeforeFill == true)) {
                dataTable.Clear();
            }
            this.Adapter.Fill(dataTable);
            if ((this.Adapter.SelectCommand.Parameters[0].Value.GetType() == typeof(System.DBNull))) {
                throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", null);
            }
            else {
                return ((int)(this.Adapter.SelectCommand.Parameters[0].Value));
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual object Fill(DataAccess.ServiceEntityDataTable dataTable, object @id, object @language_id) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            this.Adapter.SelectCommand.Parameters[1].Value = ((object)(@id));
            this.Adapter.SelectCommand.Parameters[2].Value = ((object)(@language_id));
            if ((this.m_clearBeforeFill == true)) {
                dataTable.Clear();
            }
            this.Adapter.Fill(dataTable);
            if ((this.Adapter.SelectCommand.Parameters[0].Value.GetType() == typeof(System.DBNull))) {
                return System.DBNull.Value;
            }
            else {
                return this.Adapter.SelectCommand.Parameters[0].Value;
            }
        }
        
        public virtual DataAccess.ServiceEntityDataTable GetData(int @id, int @language_id) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(@id));
            this.Adapter.SelectCommand.Parameters[2].Value = ((int)(@language_id));
            DataAccess.ServiceEntityDataTable dataTable = new DataAccess.ServiceEntityDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataAccess.ServiceEntityDataTable GetData(object @id, object @language_id) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            this.Adapter.SelectCommand.Parameters[1].Value = ((object)(@id));
            this.Adapter.SelectCommand.Parameters[2].Value = ((object)(@language_id));
            DataAccess.ServiceEntityDataTable dataTable = new DataAccess.ServiceEntityDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        public virtual int Update(DataAccess dataSet) {
            return this.Adapter.Update(dataSet, "ServiceEntity");
        }
        
        public virtual int Update(DataAccess.ServiceEntityDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
    }
    
    public interface ISubscriptionEntityTableAdapter {
        
        int Fill(DataAccess dataSet, System.Guid @id);
        
        object Fill(DataAccess dataSet, object @id);
        
        int Fill(DataAccess.SubscriptionEntityDataTable dataTable, System.Guid @id);
        
        object Fill(DataAccess.SubscriptionEntityDataTable dataTable, object @id);
        
        DataAccess.SubscriptionEntityDataTable GetData(System.Guid @id);
        
        DataAccess.SubscriptionEntityDataTable GetData(object @id);
        
        int Update(DataAccess dataSet);
        
        int Update(DataAccess.SubscriptionEntityDataTable dataTable);
        
        int Update(System.Data.DataRow[] dataRows);
        
        int Update(System.Data.DataRow dataRow);
    }
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    public partial class SubscriptionEntityTableAdapter : System.ComponentModel.Component, ISubscriptionEntityTableAdapter {
        
        private System.Data.SqlClient.SqlCommand m_DeleteCommand;
        
        private System.Data.SqlClient.SqlCommand m_InsertCommand;
        
        private System.Data.SqlClient.SqlCommand m_UpdateCommand;
        
        private System.Data.SqlClient.SqlDataAdapter m_adapter;
        
        private System.Data.SqlClient.SqlConnection m_connection;
        
        private System.Data.IDbCommand[] m_commandCollection;
        
        private System.Data.SqlClient.SqlTransaction m_transaction;
        
        private bool m_clearBeforeFill = true;
        
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this.m_adapter == null)) {
                    this.InitAdapter();
                }
                return this.m_adapter;
            }
        }
        
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this.m_connection == null)) {
                    this.InitConnection();
                }
                return this.m_connection;
            }
        }
        
        internal System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this.m_commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this.m_commandCollection;
            }
        }
        
        internal System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this.m_transaction;
            }
            set {
                System.Data.SqlClient.SqlTransaction oldTransaction = this.m_transaction;
                this.m_transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Transaction == oldTransaction)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    if ((this.Adapter.DeleteCommand.Transaction == oldTransaction)) {
                        this.Adapter.DeleteCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    if ((this.Adapter.InsertCommand.Transaction == oldTransaction)) {
                        this.Adapter.InsertCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    if ((this.Adapter.UpdateCommand.Transaction == oldTransaction)) {
                        this.Adapter.UpdateCommand.Transaction = this.m_transaction;
                    }
                }
            }
        }
        
        public bool ClearBeforeFill {
            get {
                return this.m_clearBeforeFill;
            }
            set {
                this.m_clearBeforeFill = value;
            }
        }
        
        private void InitAdapter() {
            this.m_adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SubscriptionEntity";
            tableMapping.ColumnMappings.Add("id", "Id");
            tableMapping.ColumnMappings.Add("account_id", "AccountId");
            tableMapping.ColumnMappings.Add("service_id", "ServiceId");
            tableMapping.ColumnMappings.Add("xml", "Xml");
            this.m_adapter.TableMappings.Add(tableMapping);
            this.m_adapter.SelectCommand = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).CommandText = "dbo.iqReadSubscription";
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).CommandText = "dbo.iqDeleteSubscription";
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@service_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "service_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@account_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "account_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).CommandText = "dbo.iqCreateSubscription";
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@account_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "account_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@service_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "service_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@xml", System.Data.SqlDbType.VarChar, 16, System.Data.ParameterDirection.Input, 0, 0, "xml", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).CommandText = "dbo.iqUpdateSubscription";
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@service_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "service_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@account_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "account_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@xml", System.Data.SqlDbType.VarChar, 16, System.Data.ParameterDirection.Input, 0, 0, "xml", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        private void InitConnection() {
            this.m_connection = new System.Data.SqlClient.SqlConnection();
            string csValue = null;
            System.Type settingsType = null;
            System.ComponentModel.Design.ITypeResolutionService trs = null;
            if ((this.Site != null)) {
                trs = ((System.ComponentModel.Design.ITypeResolutionService)(this.Site.GetService(typeof(System.ComponentModel.Design.ITypeResolutionService))));
            }
            if ((trs != null)) {
                settingsType = trs.GetType("Commanigy.Iquomi.Properties.Settings");
            }
            else {
                settingsType = System.Type.GetType("Commanigy.Iquomi.Properties.Settings");
            }
            if ((settingsType != null)) {
                System.Reflection.PropertyInfo diProperty = settingsType.GetProperty("Value");
                System.Reflection.PropertyInfo csProperty = settingsType.GetProperty("iquomiConnection");
                object diValue = diProperty.GetValue(null, null);
                csValue = csProperty.GetValue(diValue, null).ToString();
            }
            this.m_connection.ConnectionString = csValue;
        }
        
        private void InitCommandCollection() {
            this.m_commandCollection = new System.Data.IDbCommand[1];
            this.m_commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_commandCollection[0])).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_commandCollection[0])).CommandText = "dbo.iqReadSubscription";
            ((System.Data.SqlClient.SqlCommand)(this.m_commandCollection[0])).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this.m_commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_commandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.UniqueIdentifier, 16, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        public virtual int Fill(DataAccess dataSet, System.Guid @id) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.Guid)(@id));
            if ((this.m_clearBeforeFill == true)) {
                dataSet.SubscriptionEntity.Clear();
            }
            this.Adapter.Fill(dataSet);
            if ((this.Adapter.SelectCommand.Parameters[0].Value.GetType() == typeof(System.DBNull))) {
                throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", null);
            }
            else {
                return ((int)(this.Adapter.SelectCommand.Parameters[0].Value));
            }
        }
        
        public virtual object Fill(DataAccess dataSet, object @id) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            this.Adapter.SelectCommand.Parameters[1].Value = ((object)(@id));
            if ((this.m_clearBeforeFill == true)) {
                dataSet.SubscriptionEntity.Clear();
            }
            this.Adapter.Fill(dataSet);
            if ((this.Adapter.SelectCommand.Parameters[0].Value.GetType() == typeof(System.DBNull))) {
                return System.DBNull.Value;
            }
            else {
                return this.Adapter.SelectCommand.Parameters[0].Value;
            }
        }
        
        public virtual int Fill(DataAccess.SubscriptionEntityDataTable dataTable, System.Guid @id) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.Guid)(@id));
            if ((this.m_clearBeforeFill == true)) {
                dataTable.Clear();
            }
            this.Adapter.Fill(dataTable);
            if ((this.Adapter.SelectCommand.Parameters[0].Value.GetType() == typeof(System.DBNull))) {
                throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", null);
            }
            else {
                return ((int)(this.Adapter.SelectCommand.Parameters[0].Value));
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual object Fill(DataAccess.SubscriptionEntityDataTable dataTable, object @id) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            this.Adapter.SelectCommand.Parameters[1].Value = ((object)(@id));
            if ((this.m_clearBeforeFill == true)) {
                dataTable.Clear();
            }
            this.Adapter.Fill(dataTable);
            if ((this.Adapter.SelectCommand.Parameters[0].Value.GetType() == typeof(System.DBNull))) {
                return System.DBNull.Value;
            }
            else {
                return this.Adapter.SelectCommand.Parameters[0].Value;
            }
        }
        
        public virtual DataAccess.SubscriptionEntityDataTable GetData(System.Guid @id) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.Guid)(@id));
            DataAccess.SubscriptionEntityDataTable dataTable = new DataAccess.SubscriptionEntityDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataAccess.SubscriptionEntityDataTable GetData(object @id) {
            this.Adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            this.Adapter.SelectCommand.Parameters[1].Value = ((object)(@id));
            DataAccess.SubscriptionEntityDataTable dataTable = new DataAccess.SubscriptionEntityDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        public virtual int Update(DataAccess dataSet) {
            return this.Adapter.Update(dataSet, "SubscriptionEntity");
        }
        
        public virtual int Update(DataAccess.SubscriptionEntityDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
    }
}
