//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50215.44
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50215.44.
// 
namespace Commanigy.Iquomi.Api.Services {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IqAlertsSoap", Namespace="http://services.iquomi.com/2004/01/iqAlerts")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SecurityCertificateType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WorkInformationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentificationNumberType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScreenNameType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WebSiteType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EmailAddressType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PictureType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SpecialDateType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MyNameType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UserReference))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TelephoneNumberType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AddressType))]
    public partial class IqAlertsSoap : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback VoidOperationCompleted;
        
        public SoapAuthenticationType SoapAuthenticationTypeValue;
        
        public SoapRequestType SoapRequestTypeValue;
        
        private System.Threading.SendOrPostCallback NotifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback DebugListUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListenResponseOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public IqAlertsSoap() {
            this.Url = Commanigy.Iquomi.Api.Properties.Settings.Default.Commanigy_Iquomi_Services_Services_IqAlerts;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event VoidCompletedEventHandler VoidCompleted;
        
        /// <remarks/>
        public event NotifyCompletedEventHandler NotifyCompleted;
        
        /// <remarks/>
        public event DebugListUsersCompletedEventHandler DebugListUsersCompleted;
        
        /// <remarks/>
        public event InsertCompletedEventHandler InsertCompleted;
        
        /// <remarks/>
        public event DeleteCompletedEventHandler DeleteCompleted;
        
        /// <remarks/>
        public event ReplaceCompletedEventHandler ReplaceCompleted;
        
        /// <remarks/>
        public event UpdateCompletedEventHandler UpdateCompleted;
        
        /// <remarks/>
        public event QueryCompletedEventHandler QueryCompleted;
        
        /// <remarks/>
        public event ListenResponseCompletedEventHandler ListenResponseCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqAlerts/Void", RequestNamespace="http://services.iquomi.com/2004/01/iqAlerts", ResponseNamespace="http://services.iquomi.com/2004/01/iqAlerts", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Void(IqAlertsType a) {
            this.Invoke("Void", new object[] {
                        a});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginVoid(IqAlertsType a, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Void", new object[] {
                        a}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndVoid(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void VoidAsync(IqAlertsType a) {
            this.VoidAsync(a, null);
        }
        
        /// <remarks/>
        public void VoidAsync(IqAlertsType a, object userState) {
            if ((this.VoidOperationCompleted == null)) {
                this.VoidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVoidOperationCompleted);
            }
            this.InvokeAsync("Void", new object[] {
                        a}, this.VoidOperationCompleted, userState);
        }
        
        private void OnVoidOperationCompleted(object arg) {
            if ((this.VoidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VoidCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqAlerts/Notify", RequestNamespace="http://services.iquomi.com/2004/01/iqAlerts", ResponseNamespace="http://services.iquomi.com/2004/01/iqAlerts", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("NotifyResponse", Namespace="http://schemas.iquomi.com/2004/01/iqAlerts/Notify.xsd")]
        public NotifyResponseType Notify([System.Xml.Serialization.XmlElementAttribute("Notify", Namespace="http://schemas.iquomi.com/2004/01/iqAlerts/Notify.xsd")] NotifyType Notify1) {
            object[] results = this.Invoke("Notify", new object[] {
                        Notify1});
            return ((NotifyResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginNotify(NotifyType Notify1, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Notify", new object[] {
                        Notify1}, callback, asyncState);
        }
        
        /// <remarks/>
        public NotifyResponseType EndNotify(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((NotifyResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void NotifyAsync(NotifyType Notify1) {
            this.NotifyAsync(Notify1, null);
        }
        
        /// <remarks/>
        public void NotifyAsync(NotifyType Notify1, object userState) {
            if ((this.NotifyOperationCompleted == null)) {
                this.NotifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyOperationCompleted);
            }
            this.InvokeAsync("Notify", new object[] {
                        Notify1}, this.NotifyOperationCompleted, userState);
        }
        
        private void OnNotifyOperationCompleted(object arg) {
            if ((this.NotifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyCompleted(this, new NotifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqAlerts/DebugListUsers", RequestNamespace="http://services.iquomi.com/2004/01/iqAlerts", ResponseNamespace="http://services.iquomi.com/2004/01/iqAlerts", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] DebugListUsers() {
            object[] results = this.Invoke("DebugListUsers", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebugListUsers(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DebugListUsers", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndDebugListUsers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void DebugListUsersAsync() {
            this.DebugListUsersAsync(null);
        }
        
        /// <remarks/>
        public void DebugListUsersAsync(object userState) {
            if ((this.DebugListUsersOperationCompleted == null)) {
                this.DebugListUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDebugListUsersOperationCompleted);
            }
            this.InvokeAsync("DebugListUsers", new object[0], this.DebugListUsersOperationCompleted, userState);
        }
        
        private void OnDebugListUsersOperationCompleted(object arg) {
            if ((this.DebugListUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DebugListUsersCompleted(this, new DebugListUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqAlerts/Insert", RequestNamespace="http://services.iquomi.com/2004/01/iqAlerts", ResponseNamespace="http://services.iquomi.com/2004/01/iqAlerts", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("InsertResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public InsertResponseType Insert([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] InsertRequestType InsertRequest) {
            object[] results = this.Invoke("Insert", new object[] {
                        InsertRequest});
            return ((InsertResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsert(InsertRequestType InsertRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Insert", new object[] {
                        InsertRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public InsertResponseType EndInsert(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((InsertResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void InsertAsync(InsertRequestType InsertRequest) {
            this.InsertAsync(InsertRequest, null);
        }
        
        /// <remarks/>
        public void InsertAsync(InsertRequestType InsertRequest, object userState) {
            if ((this.InsertOperationCompleted == null)) {
                this.InsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertOperationCompleted);
            }
            this.InvokeAsync("Insert", new object[] {
                        InsertRequest}, this.InsertOperationCompleted, userState);
        }
        
        private void OnInsertOperationCompleted(object arg) {
            if ((this.InsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCompleted(this, new InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqAlerts/Delete", RequestNamespace="http://services.iquomi.com/2004/01/iqAlerts", ResponseNamespace="http://services.iquomi.com/2004/01/iqAlerts", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("DeleteResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public DeleteResponseType Delete([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] DeleteRequestType DeleteRequest) {
            object[] results = this.Invoke("Delete", new object[] {
                        DeleteRequest});
            return ((DeleteResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDelete(DeleteRequestType DeleteRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Delete", new object[] {
                        DeleteRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public DeleteResponseType EndDelete(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DeleteResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAsync(DeleteRequestType DeleteRequest) {
            this.DeleteAsync(DeleteRequest, null);
        }
        
        /// <remarks/>
        public void DeleteAsync(DeleteRequestType DeleteRequest, object userState) {
            if ((this.DeleteOperationCompleted == null)) {
                this.DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOperationCompleted);
            }
            this.InvokeAsync("Delete", new object[] {
                        DeleteRequest}, this.DeleteOperationCompleted, userState);
        }
        
        private void OnDeleteOperationCompleted(object arg) {
            if ((this.DeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompleted(this, new DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqAlerts/Replace", RequestNamespace="http://services.iquomi.com/2004/01/iqAlerts", ResponseNamespace="http://services.iquomi.com/2004/01/iqAlerts", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ReplaceResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public ReplaceResponseType Replace([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] ReplaceRequestType ReplaceRequest) {
            object[] results = this.Invoke("Replace", new object[] {
                        ReplaceRequest});
            return ((ReplaceResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReplace(ReplaceRequestType ReplaceRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Replace", new object[] {
                        ReplaceRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public ReplaceResponseType EndReplace(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReplaceResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceAsync(ReplaceRequestType ReplaceRequest) {
            this.ReplaceAsync(ReplaceRequest, null);
        }
        
        /// <remarks/>
        public void ReplaceAsync(ReplaceRequestType ReplaceRequest, object userState) {
            if ((this.ReplaceOperationCompleted == null)) {
                this.ReplaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceOperationCompleted);
            }
            this.InvokeAsync("Replace", new object[] {
                        ReplaceRequest}, this.ReplaceOperationCompleted, userState);
        }
        
        private void OnReplaceOperationCompleted(object arg) {
            if ((this.ReplaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceCompleted(this, new ReplaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqAlerts/Update", RequestNamespace="http://services.iquomi.com/2004/01/iqAlerts", ResponseNamespace="http://services.iquomi.com/2004/01/iqAlerts", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UpdateResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public UpdateResponseType Update([System.Xml.Serialization.XmlArrayAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] [System.Xml.Serialization.XmlArrayItemAttribute("UpdateBlock", IsNullable=false)] UpdateBlockType[] UpdateRequest) {
            object[] results = this.Invoke("Update", new object[] {
                        UpdateRequest});
            return ((UpdateResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdate(UpdateBlockType[] UpdateRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Update", new object[] {
                        UpdateRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public UpdateResponseType EndUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((UpdateResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateAsync(UpdateBlockType[] UpdateRequest) {
            this.UpdateAsync(UpdateRequest, null);
        }
        
        /// <remarks/>
        public void UpdateAsync(UpdateBlockType[] UpdateRequest, object userState) {
            if ((this.UpdateOperationCompleted == null)) {
                this.UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOperationCompleted);
            }
            this.InvokeAsync("Update", new object[] {
                        UpdateRequest}, this.UpdateOperationCompleted, userState);
        }
        
        private void OnUpdateOperationCompleted(object arg) {
            if ((this.UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompleted(this, new UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqAlerts/Query", RequestNamespace="http://services.iquomi.com/2004/01/iqAlerts", ResponseNamespace="http://services.iquomi.com/2004/01/iqAlerts", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("QueryResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public QueryResponseType Query([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] QueryRequestType QueryRequest) {
            object[] results = this.Invoke("Query", new object[] {
                        QueryRequest});
            return ((QueryResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginQuery(QueryRequestType QueryRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Query", new object[] {
                        QueryRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public QueryResponseType EndQuery(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((QueryResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void QueryAsync(QueryRequestType QueryRequest) {
            this.QueryAsync(QueryRequest, null);
        }
        
        /// <remarks/>
        public void QueryAsync(QueryRequestType QueryRequest, object userState) {
            if ((this.QueryOperationCompleted == null)) {
                this.QueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryOperationCompleted);
            }
            this.InvokeAsync("Query", new object[] {
                        QueryRequest}, this.QueryOperationCompleted, userState);
        }
        
        private void OnQueryOperationCompleted(object arg) {
            if ((this.QueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryCompleted(this, new QueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqAlerts/ListenResponse", RequestNamespace="http://services.iquomi.com/2004/01/iqAlerts", ResponseNamespace="http://services.iquomi.com/2004/01/iqAlerts", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ListenResponse([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] ListenTriggerType ListenTrigger) {
            this.Invoke("ListenResponse", new object[] {
                        ListenTrigger});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListenResponse(ListenTriggerType ListenTrigger, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListenResponse", new object[] {
                        ListenTrigger}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndListenResponse(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ListenResponseAsync(ListenTriggerType ListenTrigger) {
            this.ListenResponseAsync(ListenTrigger, null);
        }
        
        /// <remarks/>
        public void ListenResponseAsync(ListenTriggerType ListenTrigger, object userState) {
            if ((this.ListenResponseOperationCompleted == null)) {
                this.ListenResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListenResponseOperationCompleted);
            }
            this.InvokeAsync("ListenResponse", new object[] {
                        ListenTrigger}, this.ListenResponseOperationCompleted, userState);
        }
        
        private void OnListenResponseOperationCompleted(object arg) {
            if ((this.ListenResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListenResponseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if ((((wsUri.Port >= 1024) 
                        && (wsUri.Port <= 5000)) 
                        && (string.Compare(wsUri.Host, "localHost", true) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IqContactsSoap", Namespace="http://services.iquomi.com/2004/01/core")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SecurityCertificateType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WorkInformationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentificationNumberType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScreenNameType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WebSiteType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EmailAddressType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PictureType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SpecialDateType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MyNameType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UserReference))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TelephoneNumberType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AddressType))]
    public partial class IqContactsSoap : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback VoidOperationCompleted;
        
        public SoapAuthenticationType SoapAuthenticationTypeValue;
        
        public SoapRequestType SoapRequestTypeValue;
        
        private System.Threading.SendOrPostCallback ListenResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public IqContactsSoap() {
            this.Url = Commanigy.Iquomi.Api.Properties.Settings.Default.Commanigy_Iquomi_Services_Services_IqAlerts;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event VoidCompletedEventHandler1 VoidCompleted;
        
        /// <remarks/>
        public event ListenResponseCompletedEventHandler ListenResponseCompleted;
        
        /// <remarks/>
        public event InsertCompletedEventHandler InsertCompleted;
        
        /// <remarks/>
        public event DeleteCompletedEventHandler DeleteCompleted;
        
        /// <remarks/>
        public event ReplaceCompletedEventHandler ReplaceCompleted;
        
        /// <remarks/>
        public event UpdateCompletedEventHandler UpdateCompleted;
        
        /// <remarks/>
        public event QueryCompletedEventHandler QueryCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/core/Void", RequestNamespace="http://services.iquomi.com/2004/01/core", ResponseNamespace="http://services.iquomi.com/2004/01/core", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Void([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqContacts")] IqContactsType IqContacts) {
            this.Invoke("Void", new object[] {
                        IqContacts});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginVoid(IqContactsType IqContacts, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Void", new object[] {
                        IqContacts}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndVoid(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void VoidAsync(IqContactsType IqContacts) {
            this.VoidAsync(IqContacts, null);
        }
        
        /// <remarks/>
        public void VoidAsync(IqContactsType IqContacts, object userState) {
            if ((this.VoidOperationCompleted == null)) {
                this.VoidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVoidOperationCompleted);
            }
            this.InvokeAsync("Void", new object[] {
                        IqContacts}, this.VoidOperationCompleted, userState);
        }
        
        private void OnVoidOperationCompleted(object arg) {
            if ((this.VoidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VoidCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/core/ListenResponse", RequestNamespace="http://services.iquomi.com/2004/01/core", ResponseNamespace="http://services.iquomi.com/2004/01/core", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ListenResponse([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] ListenTriggerType ListenTrigger) {
            this.Invoke("ListenResponse", new object[] {
                        ListenTrigger});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListenResponse(ListenTriggerType ListenTrigger, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListenResponse", new object[] {
                        ListenTrigger}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndListenResponse(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ListenResponseAsync(ListenTriggerType ListenTrigger) {
            this.ListenResponseAsync(ListenTrigger, null);
        }
        
        /// <remarks/>
        public void ListenResponseAsync(ListenTriggerType ListenTrigger, object userState) {
            if ((this.ListenResponseOperationCompleted == null)) {
                this.ListenResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListenResponseOperationCompleted);
            }
            this.InvokeAsync("ListenResponse", new object[] {
                        ListenTrigger}, this.ListenResponseOperationCompleted, userState);
        }
        
        private void OnListenResponseOperationCompleted(object arg) {
            if ((this.ListenResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListenResponseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/core/Insert", RequestNamespace="http://services.iquomi.com/2004/01/core", ResponseNamespace="http://services.iquomi.com/2004/01/core", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("InsertResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public InsertResponseType Insert([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] InsertRequestType InsertRequest) {
            object[] results = this.Invoke("Insert", new object[] {
                        InsertRequest});
            return ((InsertResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsert(InsertRequestType InsertRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Insert", new object[] {
                        InsertRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public InsertResponseType EndInsert(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((InsertResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void InsertAsync(InsertRequestType InsertRequest) {
            this.InsertAsync(InsertRequest, null);
        }
        
        /// <remarks/>
        public void InsertAsync(InsertRequestType InsertRequest, object userState) {
            if ((this.InsertOperationCompleted == null)) {
                this.InsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertOperationCompleted);
            }
            this.InvokeAsync("Insert", new object[] {
                        InsertRequest}, this.InsertOperationCompleted, userState);
        }
        
        private void OnInsertOperationCompleted(object arg) {
            if ((this.InsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCompleted(this, new InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/core/Delete", RequestNamespace="http://services.iquomi.com/2004/01/core", ResponseNamespace="http://services.iquomi.com/2004/01/core", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("DeleteResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public DeleteResponseType Delete([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] DeleteRequestType DeleteRequest) {
            object[] results = this.Invoke("Delete", new object[] {
                        DeleteRequest});
            return ((DeleteResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDelete(DeleteRequestType DeleteRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Delete", new object[] {
                        DeleteRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public DeleteResponseType EndDelete(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DeleteResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAsync(DeleteRequestType DeleteRequest) {
            this.DeleteAsync(DeleteRequest, null);
        }
        
        /// <remarks/>
        public void DeleteAsync(DeleteRequestType DeleteRequest, object userState) {
            if ((this.DeleteOperationCompleted == null)) {
                this.DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOperationCompleted);
            }
            this.InvokeAsync("Delete", new object[] {
                        DeleteRequest}, this.DeleteOperationCompleted, userState);
        }
        
        private void OnDeleteOperationCompleted(object arg) {
            if ((this.DeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompleted(this, new DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/core/Replace", RequestNamespace="http://services.iquomi.com/2004/01/core", ResponseNamespace="http://services.iquomi.com/2004/01/core", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ReplaceResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public ReplaceResponseType Replace([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] ReplaceRequestType ReplaceRequest) {
            object[] results = this.Invoke("Replace", new object[] {
                        ReplaceRequest});
            return ((ReplaceResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReplace(ReplaceRequestType ReplaceRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Replace", new object[] {
                        ReplaceRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public ReplaceResponseType EndReplace(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReplaceResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceAsync(ReplaceRequestType ReplaceRequest) {
            this.ReplaceAsync(ReplaceRequest, null);
        }
        
        /// <remarks/>
        public void ReplaceAsync(ReplaceRequestType ReplaceRequest, object userState) {
            if ((this.ReplaceOperationCompleted == null)) {
                this.ReplaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceOperationCompleted);
            }
            this.InvokeAsync("Replace", new object[] {
                        ReplaceRequest}, this.ReplaceOperationCompleted, userState);
        }
        
        private void OnReplaceOperationCompleted(object arg) {
            if ((this.ReplaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceCompleted(this, new ReplaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/core/Update", RequestNamespace="http://services.iquomi.com/2004/01/core", ResponseNamespace="http://services.iquomi.com/2004/01/core", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UpdateResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public UpdateResponseType Update([System.Xml.Serialization.XmlArrayAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] [System.Xml.Serialization.XmlArrayItemAttribute("UpdateBlock", IsNullable=false)] UpdateBlockType[] UpdateRequest) {
            object[] results = this.Invoke("Update", new object[] {
                        UpdateRequest});
            return ((UpdateResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdate(UpdateBlockType[] UpdateRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Update", new object[] {
                        UpdateRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public UpdateResponseType EndUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((UpdateResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateAsync(UpdateBlockType[] UpdateRequest) {
            this.UpdateAsync(UpdateRequest, null);
        }
        
        /// <remarks/>
        public void UpdateAsync(UpdateBlockType[] UpdateRequest, object userState) {
            if ((this.UpdateOperationCompleted == null)) {
                this.UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOperationCompleted);
            }
            this.InvokeAsync("Update", new object[] {
                        UpdateRequest}, this.UpdateOperationCompleted, userState);
        }
        
        private void OnUpdateOperationCompleted(object arg) {
            if ((this.UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompleted(this, new UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/core/Query", RequestNamespace="http://services.iquomi.com/2004/01/core", ResponseNamespace="http://services.iquomi.com/2004/01/core", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("QueryResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public QueryResponseType Query([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] QueryRequestType QueryRequest) {
            object[] results = this.Invoke("Query", new object[] {
                        QueryRequest});
            return ((QueryResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginQuery(QueryRequestType QueryRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Query", new object[] {
                        QueryRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public QueryResponseType EndQuery(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((QueryResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void QueryAsync(QueryRequestType QueryRequest) {
            this.QueryAsync(QueryRequest, null);
        }
        
        /// <remarks/>
        public void QueryAsync(QueryRequestType QueryRequest, object userState) {
            if ((this.QueryOperationCompleted == null)) {
                this.QueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryOperationCompleted);
            }
            this.InvokeAsync("Query", new object[] {
                        QueryRequest}, this.QueryOperationCompleted, userState);
        }
        
        private void OnQueryOperationCompleted(object arg) {
            if ((this.QueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryCompleted(this, new QueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if ((((wsUri.Port >= 1024) 
                        && (wsUri.Port <= 5000)) 
                        && (string.Compare(wsUri.Host, "localHost", true) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IqCoreSoap", Namespace="http://services.iquomi.com/2004/01/core")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SecurityCertificateType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WorkInformationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentificationNumberType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScreenNameType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WebSiteType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EmailAddressType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PictureType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SpecialDateType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MyNameType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UserReference))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TelephoneNumberType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AddressType))]
    public partial class IqCoreSoap : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        public SoapAuthenticationType SoapAuthenticationTypeValue;
        
        public SoapRequestType SoapRequestTypeValue;
        
        private System.Threading.SendOrPostCallback InsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListenResponseOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public IqCoreSoap() {
            this.Url = Commanigy.Iquomi.Api.Properties.Settings.Default.Commanigy_Iquomi_Services_Services_IqAlerts;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event InsertCompletedEventHandler InsertCompleted;
        
        /// <remarks/>
        public event DeleteCompletedEventHandler DeleteCompleted;
        
        /// <remarks/>
        public event ReplaceCompletedEventHandler ReplaceCompleted;
        
        /// <remarks/>
        public event UpdateCompletedEventHandler UpdateCompleted;
        
        /// <remarks/>
        public event QueryCompletedEventHandler QueryCompleted;
        
        /// <remarks/>
        public event ListenResponseCompletedEventHandler ListenResponseCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/core/Insert", RequestNamespace="http://services.iquomi.com/2004/01/core", ResponseNamespace="http://services.iquomi.com/2004/01/core", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("InsertResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public InsertResponseType Insert([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] InsertRequestType InsertRequest) {
            object[] results = this.Invoke("Insert", new object[] {
                        InsertRequest});
            return ((InsertResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsert(InsertRequestType InsertRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Insert", new object[] {
                        InsertRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public InsertResponseType EndInsert(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((InsertResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void InsertAsync(InsertRequestType InsertRequest) {
            this.InsertAsync(InsertRequest, null);
        }
        
        /// <remarks/>
        public void InsertAsync(InsertRequestType InsertRequest, object userState) {
            if ((this.InsertOperationCompleted == null)) {
                this.InsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertOperationCompleted);
            }
            this.InvokeAsync("Insert", new object[] {
                        InsertRequest}, this.InsertOperationCompleted, userState);
        }
        
        private void OnInsertOperationCompleted(object arg) {
            if ((this.InsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCompleted(this, new InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/core/Delete", RequestNamespace="http://services.iquomi.com/2004/01/core", ResponseNamespace="http://services.iquomi.com/2004/01/core", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("DeleteResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public DeleteResponseType Delete([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] DeleteRequestType DeleteRequest) {
            object[] results = this.Invoke("Delete", new object[] {
                        DeleteRequest});
            return ((DeleteResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDelete(DeleteRequestType DeleteRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Delete", new object[] {
                        DeleteRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public DeleteResponseType EndDelete(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DeleteResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAsync(DeleteRequestType DeleteRequest) {
            this.DeleteAsync(DeleteRequest, null);
        }
        
        /// <remarks/>
        public void DeleteAsync(DeleteRequestType DeleteRequest, object userState) {
            if ((this.DeleteOperationCompleted == null)) {
                this.DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOperationCompleted);
            }
            this.InvokeAsync("Delete", new object[] {
                        DeleteRequest}, this.DeleteOperationCompleted, userState);
        }
        
        private void OnDeleteOperationCompleted(object arg) {
            if ((this.DeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompleted(this, new DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/core/Replace", RequestNamespace="http://services.iquomi.com/2004/01/core", ResponseNamespace="http://services.iquomi.com/2004/01/core", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ReplaceResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public ReplaceResponseType Replace([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] ReplaceRequestType ReplaceRequest) {
            object[] results = this.Invoke("Replace", new object[] {
                        ReplaceRequest});
            return ((ReplaceResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReplace(ReplaceRequestType ReplaceRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Replace", new object[] {
                        ReplaceRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public ReplaceResponseType EndReplace(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReplaceResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceAsync(ReplaceRequestType ReplaceRequest) {
            this.ReplaceAsync(ReplaceRequest, null);
        }
        
        /// <remarks/>
        public void ReplaceAsync(ReplaceRequestType ReplaceRequest, object userState) {
            if ((this.ReplaceOperationCompleted == null)) {
                this.ReplaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceOperationCompleted);
            }
            this.InvokeAsync("Replace", new object[] {
                        ReplaceRequest}, this.ReplaceOperationCompleted, userState);
        }
        
        private void OnReplaceOperationCompleted(object arg) {
            if ((this.ReplaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceCompleted(this, new ReplaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/core/Update", RequestNamespace="http://services.iquomi.com/2004/01/core", ResponseNamespace="http://services.iquomi.com/2004/01/core", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UpdateResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public UpdateResponseType Update([System.Xml.Serialization.XmlArrayAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] [System.Xml.Serialization.XmlArrayItemAttribute("UpdateBlock", IsNullable=false)] UpdateBlockType[] UpdateRequest) {
            object[] results = this.Invoke("Update", new object[] {
                        UpdateRequest});
            return ((UpdateResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdate(UpdateBlockType[] UpdateRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Update", new object[] {
                        UpdateRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public UpdateResponseType EndUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((UpdateResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateAsync(UpdateBlockType[] UpdateRequest) {
            this.UpdateAsync(UpdateRequest, null);
        }
        
        /// <remarks/>
        public void UpdateAsync(UpdateBlockType[] UpdateRequest, object userState) {
            if ((this.UpdateOperationCompleted == null)) {
                this.UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOperationCompleted);
            }
            this.InvokeAsync("Update", new object[] {
                        UpdateRequest}, this.UpdateOperationCompleted, userState);
        }
        
        private void OnUpdateOperationCompleted(object arg) {
            if ((this.UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompleted(this, new UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/core/Query", RequestNamespace="http://services.iquomi.com/2004/01/core", ResponseNamespace="http://services.iquomi.com/2004/01/core", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("QueryResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public QueryResponseType Query([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] QueryRequestType QueryRequest) {
            object[] results = this.Invoke("Query", new object[] {
                        QueryRequest});
            return ((QueryResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginQuery(QueryRequestType QueryRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Query", new object[] {
                        QueryRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public QueryResponseType EndQuery(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((QueryResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void QueryAsync(QueryRequestType QueryRequest) {
            this.QueryAsync(QueryRequest, null);
        }
        
        /// <remarks/>
        public void QueryAsync(QueryRequestType QueryRequest, object userState) {
            if ((this.QueryOperationCompleted == null)) {
                this.QueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryOperationCompleted);
            }
            this.InvokeAsync("Query", new object[] {
                        QueryRequest}, this.QueryOperationCompleted, userState);
        }
        
        private void OnQueryOperationCompleted(object arg) {
            if ((this.QueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryCompleted(this, new QueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/core/ListenResponse", RequestNamespace="http://services.iquomi.com/2004/01/core", ResponseNamespace="http://services.iquomi.com/2004/01/core", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ListenResponse([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] ListenTriggerType ListenTrigger) {
            this.Invoke("ListenResponse", new object[] {
                        ListenTrigger});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListenResponse(ListenTriggerType ListenTrigger, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListenResponse", new object[] {
                        ListenTrigger}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndListenResponse(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ListenResponseAsync(ListenTriggerType ListenTrigger) {
            this.ListenResponseAsync(ListenTrigger, null);
        }
        
        /// <remarks/>
        public void ListenResponseAsync(ListenTriggerType ListenTrigger, object userState) {
            if ((this.ListenResponseOperationCompleted == null)) {
                this.ListenResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListenResponseOperationCompleted);
            }
            this.InvokeAsync("ListenResponse", new object[] {
                        ListenTrigger}, this.ListenResponseOperationCompleted, userState);
        }
        
        private void OnListenResponseOperationCompleted(object arg) {
            if ((this.ListenResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListenResponseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if ((((wsUri.Port >= 1024) 
                        && (wsUri.Port <= 5000)) 
                        && (string.Compare(wsUri.Host, "localHost", true) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IqPresenceSoap", Namespace="http://services.iquomi.com/2004/01/iqPresence")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SecurityCertificateType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WorkInformationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentificationNumberType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScreenNameType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WebSiteType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EmailAddressType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PictureType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SpecialDateType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MyNameType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UserReference))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TelephoneNumberType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AddressType))]
    public partial class IqPresenceSoap : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        public SoapAuthenticationType SoapAuthenticationTypeValue;
        
        public SoapRequestType SoapRequestTypeValue;
        
        private System.Threading.SendOrPostCallback NotifyEndpointOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListenResponseOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public IqPresenceSoap() {
            this.Url = Commanigy.Iquomi.Api.Properties.Settings.Default.Commanigy_Iquomi_Services_Services_IqAlerts;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event NotifyEndpointCompletedEventHandler NotifyEndpointCompleted;
        
        /// <remarks/>
        public event InsertCompletedEventHandler InsertCompleted;
        
        /// <remarks/>
        public event DeleteCompletedEventHandler DeleteCompleted;
        
        /// <remarks/>
        public event ReplaceCompletedEventHandler ReplaceCompleted;
        
        /// <remarks/>
        public event UpdateCompletedEventHandler UpdateCompleted;
        
        /// <remarks/>
        public event QueryCompletedEventHandler QueryCompleted;
        
        /// <remarks/>
        public event ListenResponseCompletedEventHandler ListenResponseCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqPresence/NotifyEndpoint", RequestNamespace="http://services.iquomi.com/2004/01/iqPresence", ResponseNamespace="http://services.iquomi.com/2004/01/iqPresence", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void NotifyEndpoint([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqPresence")] req req) {
            this.Invoke("NotifyEndpoint", new object[] {
                        req});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginNotifyEndpoint(req req, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("NotifyEndpoint", new object[] {
                        req}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndNotifyEndpoint(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void NotifyEndpointAsync(req req) {
            this.NotifyEndpointAsync(req, null);
        }
        
        /// <remarks/>
        public void NotifyEndpointAsync(req req, object userState) {
            if ((this.NotifyEndpointOperationCompleted == null)) {
                this.NotifyEndpointOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyEndpointOperationCompleted);
            }
            this.InvokeAsync("NotifyEndpoint", new object[] {
                        req}, this.NotifyEndpointOperationCompleted, userState);
        }
        
        private void OnNotifyEndpointOperationCompleted(object arg) {
            if ((this.NotifyEndpointCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyEndpointCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqPresence/Insert", RequestNamespace="http://services.iquomi.com/2004/01/iqPresence", ResponseNamespace="http://services.iquomi.com/2004/01/iqPresence", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("InsertResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public InsertResponseType Insert([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] InsertRequestType InsertRequest) {
            object[] results = this.Invoke("Insert", new object[] {
                        InsertRequest});
            return ((InsertResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsert(InsertRequestType InsertRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Insert", new object[] {
                        InsertRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public InsertResponseType EndInsert(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((InsertResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void InsertAsync(InsertRequestType InsertRequest) {
            this.InsertAsync(InsertRequest, null);
        }
        
        /// <remarks/>
        public void InsertAsync(InsertRequestType InsertRequest, object userState) {
            if ((this.InsertOperationCompleted == null)) {
                this.InsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertOperationCompleted);
            }
            this.InvokeAsync("Insert", new object[] {
                        InsertRequest}, this.InsertOperationCompleted, userState);
        }
        
        private void OnInsertOperationCompleted(object arg) {
            if ((this.InsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCompleted(this, new InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqPresence/Delete", RequestNamespace="http://services.iquomi.com/2004/01/iqPresence", ResponseNamespace="http://services.iquomi.com/2004/01/iqPresence", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("DeleteResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public DeleteResponseType Delete([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] DeleteRequestType DeleteRequest) {
            object[] results = this.Invoke("Delete", new object[] {
                        DeleteRequest});
            return ((DeleteResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDelete(DeleteRequestType DeleteRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Delete", new object[] {
                        DeleteRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public DeleteResponseType EndDelete(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DeleteResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAsync(DeleteRequestType DeleteRequest) {
            this.DeleteAsync(DeleteRequest, null);
        }
        
        /// <remarks/>
        public void DeleteAsync(DeleteRequestType DeleteRequest, object userState) {
            if ((this.DeleteOperationCompleted == null)) {
                this.DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOperationCompleted);
            }
            this.InvokeAsync("Delete", new object[] {
                        DeleteRequest}, this.DeleteOperationCompleted, userState);
        }
        
        private void OnDeleteOperationCompleted(object arg) {
            if ((this.DeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompleted(this, new DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqPresence/Replace", RequestNamespace="http://services.iquomi.com/2004/01/iqPresence", ResponseNamespace="http://services.iquomi.com/2004/01/iqPresence", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ReplaceResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public ReplaceResponseType Replace([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] ReplaceRequestType ReplaceRequest) {
            object[] results = this.Invoke("Replace", new object[] {
                        ReplaceRequest});
            return ((ReplaceResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReplace(ReplaceRequestType ReplaceRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Replace", new object[] {
                        ReplaceRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public ReplaceResponseType EndReplace(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReplaceResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceAsync(ReplaceRequestType ReplaceRequest) {
            this.ReplaceAsync(ReplaceRequest, null);
        }
        
        /// <remarks/>
        public void ReplaceAsync(ReplaceRequestType ReplaceRequest, object userState) {
            if ((this.ReplaceOperationCompleted == null)) {
                this.ReplaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceOperationCompleted);
            }
            this.InvokeAsync("Replace", new object[] {
                        ReplaceRequest}, this.ReplaceOperationCompleted, userState);
        }
        
        private void OnReplaceOperationCompleted(object arg) {
            if ((this.ReplaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceCompleted(this, new ReplaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqPresence/Update", RequestNamespace="http://services.iquomi.com/2004/01/iqPresence", ResponseNamespace="http://services.iquomi.com/2004/01/iqPresence", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UpdateResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public UpdateResponseType Update([System.Xml.Serialization.XmlArrayAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] [System.Xml.Serialization.XmlArrayItemAttribute("UpdateBlock", IsNullable=false)] UpdateBlockType[] UpdateRequest) {
            object[] results = this.Invoke("Update", new object[] {
                        UpdateRequest});
            return ((UpdateResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdate(UpdateBlockType[] UpdateRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Update", new object[] {
                        UpdateRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public UpdateResponseType EndUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((UpdateResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateAsync(UpdateBlockType[] UpdateRequest) {
            this.UpdateAsync(UpdateRequest, null);
        }
        
        /// <remarks/>
        public void UpdateAsync(UpdateBlockType[] UpdateRequest, object userState) {
            if ((this.UpdateOperationCompleted == null)) {
                this.UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOperationCompleted);
            }
            this.InvokeAsync("Update", new object[] {
                        UpdateRequest}, this.UpdateOperationCompleted, userState);
        }
        
        private void OnUpdateOperationCompleted(object arg) {
            if ((this.UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompleted(this, new UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqPresence/Query", RequestNamespace="http://services.iquomi.com/2004/01/iqPresence", ResponseNamespace="http://services.iquomi.com/2004/01/iqPresence", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("QueryResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public QueryResponseType Query([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] QueryRequestType QueryRequest) {
            object[] results = this.Invoke("Query", new object[] {
                        QueryRequest});
            return ((QueryResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginQuery(QueryRequestType QueryRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Query", new object[] {
                        QueryRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public QueryResponseType EndQuery(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((QueryResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void QueryAsync(QueryRequestType QueryRequest) {
            this.QueryAsync(QueryRequest, null);
        }
        
        /// <remarks/>
        public void QueryAsync(QueryRequestType QueryRequest, object userState) {
            if ((this.QueryOperationCompleted == null)) {
                this.QueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryOperationCompleted);
            }
            this.InvokeAsync("Query", new object[] {
                        QueryRequest}, this.QueryOperationCompleted, userState);
        }
        
        private void OnQueryOperationCompleted(object arg) {
            if ((this.QueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryCompleted(this, new QueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqPresence/ListenResponse", RequestNamespace="http://services.iquomi.com/2004/01/iqPresence", ResponseNamespace="http://services.iquomi.com/2004/01/iqPresence", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ListenResponse([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] ListenTriggerType ListenTrigger) {
            this.Invoke("ListenResponse", new object[] {
                        ListenTrigger});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListenResponse(ListenTriggerType ListenTrigger, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListenResponse", new object[] {
                        ListenTrigger}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndListenResponse(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ListenResponseAsync(ListenTriggerType ListenTrigger) {
            this.ListenResponseAsync(ListenTrigger, null);
        }
        
        /// <remarks/>
        public void ListenResponseAsync(ListenTriggerType ListenTrigger, object userState) {
            if ((this.ListenResponseOperationCompleted == null)) {
                this.ListenResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListenResponseOperationCompleted);
            }
            this.InvokeAsync("ListenResponse", new object[] {
                        ListenTrigger}, this.ListenResponseOperationCompleted, userState);
        }
        
        private void OnListenResponseOperationCompleted(object arg) {
            if ((this.ListenResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListenResponseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if ((((wsUri.Port >= 1024) 
                        && (wsUri.Port <= 5000)) 
                        && (string.Compare(wsUri.Host, "localHost", true) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IqProfileSoap", Namespace="http://services.iquomi.com/2004/01/iqProfile")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SecurityCertificateType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WorkInformationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentificationNumberType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScreenNameType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WebSiteType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EmailAddressType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PictureType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SpecialDateType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MyNameType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UserReference))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TelephoneNumberType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AddressType))]
    public partial class IqProfileSoap : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback VoidOperationCompleted;
        
        public SoapAuthenticationType SoapAuthenticationTypeValue;
        
        public SoapRequestType SoapRequestTypeValue;
        
        private System.Threading.SendOrPostCallback InsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListenResponseOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public IqProfileSoap() {
            this.Url = Commanigy.Iquomi.Api.Properties.Settings.Default.Commanigy_Iquomi_Services_Services_IqAlerts;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event VoidCompletedEventHandler2 VoidCompleted;
        
        /// <remarks/>
        public event InsertCompletedEventHandler InsertCompleted;
        
        /// <remarks/>
        public event DeleteCompletedEventHandler DeleteCompleted;
        
        /// <remarks/>
        public event ReplaceCompletedEventHandler ReplaceCompleted;
        
        /// <remarks/>
        public event UpdateCompletedEventHandler UpdateCompleted;
        
        /// <remarks/>
        public event QueryCompletedEventHandler QueryCompleted;
        
        /// <remarks/>
        public event ListenResponseCompletedEventHandler ListenResponseCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqProfile/Void", RequestNamespace="http://services.iquomi.com/2004/01/iqProfile", ResponseNamespace="http://services.iquomi.com/2004/01/iqProfile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Void([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")] IqProfileType IqProfile) {
            this.Invoke("Void", new object[] {
                        IqProfile});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginVoid(IqProfileType IqProfile, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Void", new object[] {
                        IqProfile}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndVoid(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void VoidAsync(IqProfileType IqProfile) {
            this.VoidAsync(IqProfile, null);
        }
        
        /// <remarks/>
        public void VoidAsync(IqProfileType IqProfile, object userState) {
            if ((this.VoidOperationCompleted == null)) {
                this.VoidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVoidOperationCompleted);
            }
            this.InvokeAsync("Void", new object[] {
                        IqProfile}, this.VoidOperationCompleted, userState);
        }
        
        private void OnVoidOperationCompleted(object arg) {
            if ((this.VoidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VoidCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqProfile/Insert", RequestNamespace="http://services.iquomi.com/2004/01/iqProfile", ResponseNamespace="http://services.iquomi.com/2004/01/iqProfile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("InsertResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public InsertResponseType Insert([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] InsertRequestType InsertRequest) {
            object[] results = this.Invoke("Insert", new object[] {
                        InsertRequest});
            return ((InsertResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsert(InsertRequestType InsertRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Insert", new object[] {
                        InsertRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public InsertResponseType EndInsert(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((InsertResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void InsertAsync(InsertRequestType InsertRequest) {
            this.InsertAsync(InsertRequest, null);
        }
        
        /// <remarks/>
        public void InsertAsync(InsertRequestType InsertRequest, object userState) {
            if ((this.InsertOperationCompleted == null)) {
                this.InsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertOperationCompleted);
            }
            this.InvokeAsync("Insert", new object[] {
                        InsertRequest}, this.InsertOperationCompleted, userState);
        }
        
        private void OnInsertOperationCompleted(object arg) {
            if ((this.InsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCompleted(this, new InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqProfile/Delete", RequestNamespace="http://services.iquomi.com/2004/01/iqProfile", ResponseNamespace="http://services.iquomi.com/2004/01/iqProfile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("DeleteResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public DeleteResponseType Delete([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] DeleteRequestType DeleteRequest) {
            object[] results = this.Invoke("Delete", new object[] {
                        DeleteRequest});
            return ((DeleteResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDelete(DeleteRequestType DeleteRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Delete", new object[] {
                        DeleteRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public DeleteResponseType EndDelete(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DeleteResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAsync(DeleteRequestType DeleteRequest) {
            this.DeleteAsync(DeleteRequest, null);
        }
        
        /// <remarks/>
        public void DeleteAsync(DeleteRequestType DeleteRequest, object userState) {
            if ((this.DeleteOperationCompleted == null)) {
                this.DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOperationCompleted);
            }
            this.InvokeAsync("Delete", new object[] {
                        DeleteRequest}, this.DeleteOperationCompleted, userState);
        }
        
        private void OnDeleteOperationCompleted(object arg) {
            if ((this.DeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompleted(this, new DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqProfile/Replace", RequestNamespace="http://services.iquomi.com/2004/01/iqProfile", ResponseNamespace="http://services.iquomi.com/2004/01/iqProfile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ReplaceResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public ReplaceResponseType Replace([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] ReplaceRequestType ReplaceRequest) {
            object[] results = this.Invoke("Replace", new object[] {
                        ReplaceRequest});
            return ((ReplaceResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReplace(ReplaceRequestType ReplaceRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Replace", new object[] {
                        ReplaceRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public ReplaceResponseType EndReplace(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReplaceResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceAsync(ReplaceRequestType ReplaceRequest) {
            this.ReplaceAsync(ReplaceRequest, null);
        }
        
        /// <remarks/>
        public void ReplaceAsync(ReplaceRequestType ReplaceRequest, object userState) {
            if ((this.ReplaceOperationCompleted == null)) {
                this.ReplaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceOperationCompleted);
            }
            this.InvokeAsync("Replace", new object[] {
                        ReplaceRequest}, this.ReplaceOperationCompleted, userState);
        }
        
        private void OnReplaceOperationCompleted(object arg) {
            if ((this.ReplaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceCompleted(this, new ReplaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqProfile/Update", RequestNamespace="http://services.iquomi.com/2004/01/iqProfile", ResponseNamespace="http://services.iquomi.com/2004/01/iqProfile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UpdateResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public UpdateResponseType Update([System.Xml.Serialization.XmlArrayAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] [System.Xml.Serialization.XmlArrayItemAttribute("UpdateBlock", IsNullable=false)] UpdateBlockType[] UpdateRequest) {
            object[] results = this.Invoke("Update", new object[] {
                        UpdateRequest});
            return ((UpdateResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdate(UpdateBlockType[] UpdateRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Update", new object[] {
                        UpdateRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public UpdateResponseType EndUpdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((UpdateResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateAsync(UpdateBlockType[] UpdateRequest) {
            this.UpdateAsync(UpdateRequest, null);
        }
        
        /// <remarks/>
        public void UpdateAsync(UpdateBlockType[] UpdateRequest, object userState) {
            if ((this.UpdateOperationCompleted == null)) {
                this.UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOperationCompleted);
            }
            this.InvokeAsync("Update", new object[] {
                        UpdateRequest}, this.UpdateOperationCompleted, userState);
        }
        
        private void OnUpdateOperationCompleted(object arg) {
            if ((this.UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompleted(this, new UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqProfile/Query", RequestNamespace="http://services.iquomi.com/2004/01/iqProfile", ResponseNamespace="http://services.iquomi.com/2004/01/iqProfile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("QueryResponse", Namespace="http://schemas.iquomi.com/2004/01/core")]
        public QueryResponseType Query([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] QueryRequestType QueryRequest) {
            object[] results = this.Invoke("Query", new object[] {
                        QueryRequest});
            return ((QueryResponseType)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginQuery(QueryRequestType QueryRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Query", new object[] {
                        QueryRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public QueryResponseType EndQuery(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((QueryResponseType)(results[0]));
        }
        
        /// <remarks/>
        public void QueryAsync(QueryRequestType QueryRequest) {
            this.QueryAsync(QueryRequest, null);
        }
        
        /// <remarks/>
        public void QueryAsync(QueryRequestType QueryRequest, object userState) {
            if ((this.QueryOperationCompleted == null)) {
                this.QueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryOperationCompleted);
            }
            this.InvokeAsync("Query", new object[] {
                        QueryRequest}, this.QueryOperationCompleted, userState);
        }
        
        private void OnQueryOperationCompleted(object arg) {
            if ((this.QueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryCompleted(this, new QueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapAuthenticationTypeValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("SoapRequestTypeValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.iquomi.com/2004/01/iqProfile/ListenResponse", RequestNamespace="http://services.iquomi.com/2004/01/iqProfile", ResponseNamespace="http://services.iquomi.com/2004/01/iqProfile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ListenResponse([System.Xml.Serialization.XmlElementAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")] ListenTriggerType ListenTrigger) {
            this.Invoke("ListenResponse", new object[] {
                        ListenTrigger});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginListenResponse(ListenTriggerType ListenTrigger, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ListenResponse", new object[] {
                        ListenTrigger}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndListenResponse(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ListenResponseAsync(ListenTriggerType ListenTrigger) {
            this.ListenResponseAsync(ListenTrigger, null);
        }
        
        /// <remarks/>
        public void ListenResponseAsync(ListenTriggerType ListenTrigger, object userState) {
            if ((this.ListenResponseOperationCompleted == null)) {
                this.ListenResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListenResponseOperationCompleted);
            }
            this.InvokeAsync("ListenResponse", new object[] {
                        ListenTrigger}, this.ListenResponseOperationCompleted, userState);
        }
        
        private void OnListenResponseOperationCompleted(object arg) {
            if ((this.ListenResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListenResponseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if ((((wsUri.Port >= 1024) 
                        && (wsUri.Port <= 5000)) 
                        && (string.Compare(wsUri.Host, "localHost", true) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.iquomi.com/2004/01/core")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://services.iquomi.com/2004/01/core", IsNullable=false)]
    public partial class SoapAuthenticationType : System.Web.Services.Protocols.SoapHeader {
        
        /// <remarks/>
        public string Iqid;
        
        /// <remarks/>
        public string Password;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class GenderBlueType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public GenderType Value;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public enum GenderType {
        
        /// <remarks/>
        f,
        
        /// <remarks/>
        m,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class TimeZonePreferenceType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Cat")]
        public CatType[] Cat;
        
        /// <remarks/>
        public string TimeZone;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class CatType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, DataType="anyURI")]
        public string Ref;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class LanguagePreferenceType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public LanguagePreferenceTypeLevel Level;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public enum LanguagePreferenceTypeLevel {
        
        /// <remarks/>
        native,
        
        /// <remarks/>
        fluent,
        
        /// <remarks/>
        intermediate,
        
        /// <remarks/>
        beginner,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class MemberInformationType {
        
        /// <remarks/>
        public LocalizableString MemberNamePortion;
        
        /// <remarks/>
        public string DomainNamePortion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class LocalizableString {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.w3.org/XML/1998/namespace")]
        public string lang;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public DirType Dir;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public enum DirType {
        
        /// <remarks/>
        Rtl,
        
        /// <remarks/>
        Ltr,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class IqProfileType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public NameType[] Name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("MemberInformation")]
        public MemberInformationType[] MemberInformation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("LanguagePreference")]
        public LanguagePreferenceType[] LanguagePreference;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("TimeZonePreference")]
        public TimeZonePreferenceType[] TimeZonePreference;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SpecialDate")]
        public SpecialDateBlueType[] SpecialDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("UserReference")]
        public CategorizedUserReferenceBlueType[] UserReference;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Picture")]
        public PictureBlueType[] Picture;
        
        /// <remarks/>
        public GenderBlueType Gender;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("IdentificationNumber")]
        public IdentificationNumberBlueType[] IdentificationNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("WorkInformation")]
        public WorkInformationBlueType[] WorkInformation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Address")]
        public AddressBlueType[] Address;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("WebSite")]
        public WebSiteBlueType[] WebSite;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("EmailAddress")]
        public EmailAddressBlueType[] EmailAddress;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ScreenName")]
        public ScreenNameBlueType[] ScreenName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("TelephoneNumber")]
        public TelephoneNumberBlueType[] TelephoneNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Subscription")]
        public SubscriptionType[] Subscription;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SecurityCertificate")]
        public SecurityCertificateBlueType[] SecurityCertificate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string InstanceId;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class NameType : MyNameType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NameType))]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class MyNameType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Cat")]
        public CatType[] Cat;
        
        /// <remarks/>
        public LocalizableString Title;
        
        /// <remarks/>
        public LocalizableString GivenName;
        
        /// <remarks/>
        public LocalizableString MiddleName;
        
        /// <remarks/>
        public LocalizableString SurName;
        
        /// <remarks/>
        public LocalizableString Suffix;
        
        /// <remarks/>
        public LocalizableString FileAsName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class SpecialDateBlueType : SpecialDateType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SpecialDateBlueType))]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class SpecialDateType {
        
        /// <remarks/>
        public CatType Cat;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        public System.DateTime Date;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public CalendarLocaleEnum CalendarType;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqCalendar")]
    public enum CalendarLocaleEnum {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("-1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item11,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        Item7,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        Item8,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        Item9,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        Item10,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("11")]
        Item111,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("12")]
        Item12,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("13")]
        Item13,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("14")]
        Item14,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("15")]
        Item15,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("16")]
        Item16,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("17")]
        Item17,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("18")]
        Item18,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("19")]
        Item19,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class CategorizedUserReferenceBlueType : UserReferenceCategorized {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CategorizedUserReferenceBlueType))]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class UserReferenceCategorized : UserReference {
        
        /// <remarks/>
        public CatType Cat;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AttendeeInfoType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AttendeeType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AttendeeBlueType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UninviteAttendeeType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UserReferenceCategorized))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CategorizedUserReferenceBlueType))]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class UserReference {
        
        /// <remarks/>
        public LocalizableString Name;
        
        /// <remarks/>
        public string Puid;
        
        /// <remarks/>
        public string Email;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AttendeeType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AttendeeBlueType))]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqCalendar")]
    public partial class AttendeeInfoType : UserReference {
        
        /// <remarks/>
        public InviteTypeEnum InviteType;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqCalendar")]
    public enum InviteTypeEnum {
        
        /// <remarks/>
        Required,
        
        /// <remarks/>
        Optional,
        
        /// <remarks/>
        Resource,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AttendeeBlueType))]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqCalendar")]
    public partial class AttendeeType : AttendeeInfoType {
        
        /// <remarks/>
        public System.DateTime ResponseTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ResponseTimeSpecified;
        
        /// <remarks/>
        public AttendeeAcceptEnum ResponseType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ResponseTypeSpecified;
        
        /// <remarks/>
        public System.DateTime CounterProposeStartTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CounterProposeStartTimeSpecified;
        
        /// <remarks/>
        public System.DateTime CounterProposeEndTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CounterProposeEndTimeSpecified;
        
        /// <remarks/>
        public string CounterProposeLocation;
        
        /// <remarks/>
        public LongText ResponseBody;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqCalendar")]
    public enum AttendeeAcceptEnum {
        
        /// <remarks/>
        Accept,
        
        /// <remarks/>
        Decline,
        
        /// <remarks/>
        Tentative,
        
        /// <remarks/>
        CounterPropose,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class LongText {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.w3.org/XML/1998/namespace")]
        public string lang;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public DirType Dir;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqCalendar")]
    public partial class AttendeeBlueType : AttendeeType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqCalendar")]
    public partial class UninviteAttendeeType : UserReference {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool DeleteAttendee;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DeleteAttendeeSpecified;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class PictureBlueType : PictureType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PictureBlueType))]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class PictureType {
        
        /// <remarks/>
        public CatType Cat;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        public string Url;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class IdentificationNumberBlueType : IdentificationNumberType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentificationNumberBlueType))]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class IdentificationNumberType {
        
        /// <remarks/>
        public CatType Cat;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        public string Number;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class WorkInformationBlueType : WorkInformationType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WorkInformationBlueType))]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class WorkInformationType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Cat")]
        public CatType[] Cat;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        public LocalizableString Profession;
        
        /// <remarks/>
        public LocalizableString JobTitle;
        
        /// <remarks/>
        public LocalizableString OfficeLocation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CoworkerOrDepartment")]
        public UserReferenceCategorized[] CoworkerOrDepartment;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class AddressBlueType : AddressType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AddressBlueType))]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class AddressType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Cat")]
        public CatType[] Cat;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        public LocalizableString OfficialAddressLine;
        
        /// <remarks/>
        public LocalizableString InternalAddressLine;
        
        /// <remarks/>
        public LocalizableString PrimaryCity;
        
        /// <remarks/>
        public LocalizableString SecondaryCity;
        
        /// <remarks/>
        public LocalizableString Subdivision;
        
        /// <remarks/>
        public string PostalCode;
        
        /// <remarks/>
        public string CountryCode;
        
        /// <remarks/>
        public string Latitude;
        
        /// <remarks/>
        public string Longitude;
        
        /// <remarks/>
        public string Elevation;
        
        /// <remarks/>
        public AddressTypeVelocity Velocity;
        
        /// <remarks/>
        public string Confidence;
        
        /// <remarks/>
        public string Precision;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class AddressTypeVelocity {
        
        /// <remarks/>
        public string Speed;
        
        /// <remarks/>
        public string Direction;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class WebSiteBlueType : WebSiteType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WebSiteBlueType))]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class WebSiteType {
        
        /// <remarks/>
        public CatType Cat;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        public string Url;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class EmailAddressBlueType : EmailAddressType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EmailAddressBlueType))]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class EmailAddressType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Cat")]
        public CatType[] Cat;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        public string Email;
        
        /// <remarks/>
        public LocalizableString Name;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class ScreenNameBlueType : ScreenNameType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScreenNameBlueType))]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class ScreenNameType {
        
        /// <remarks/>
        public CatType Cat;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        public LocalizableString Name;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class TelephoneNumberBlueType : TelephoneNumberType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TelephoneNumberBlueType))]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class TelephoneNumberType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Cat")]
        public CatType[] Cat;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        public string CountryCode;
        
        /// <remarks/>
        public string NationalCode;
        
        /// <remarks/>
        public string Number;
        
        /// <remarks/>
        public string NumberExtension;
        
        /// <remarks/>
        public string Pin;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class SubscriptionType {
        
        /// <remarks/>
        public SubscriptionTypeTrigger Trigger;
        
        /// <remarks/>
        public System.DateTime ExpiresAt;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExpiresAtSpecified;
        
        /// <remarks/>
        public SubscriptionTypeContext Context;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")]
        public string To;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, DataType="hexBinary")]
        public byte[] Creator;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class SubscriptionTypeTrigger {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Select;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public SubscriptionTypeTriggerMode Mode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, DataType="nonNegativeInteger")]
        public string BaseChangeNumber;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.iquomi.com/2004/01/core")]
    public enum SubscriptionTypeTriggerMode {
        
        /// <remarks/>
        IncludeData,
        
        /// <remarks/>
        ExcludeData,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class SubscriptionTypeContext {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, DataType="anyURI")]
        public string Uri;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class SecurityCertificateBlueType : SecurityCertificateType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SecurityCertificateBlueType))]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqProfile")]
    public partial class SecurityCertificateType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Cat")]
        public CatType[] Cat;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="hexBinary")]
        public byte[] Certificate;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqContacts")]
    public partial class ContactType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Cat")]
        public CatType[] Cat;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Name")]
        public NameType[] Name;
        
        /// <remarks/>
        public string Puid;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SpecialDate")]
        public SpecialDateBlueType[] SpecialDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Picture")]
        public PictureBlueType[] Picture;
        
        /// <remarks/>
        public GenderType Gender;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GenderSpecified;
        
        /// <remarks/>
        public LongText Notes;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Address")]
        public AddressBlueType[] Address;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("EmailAddress")]
        public EmailAddressBlueType[] EmailAddress;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("WebSite")]
        public WebSiteBlueType[] WebSite;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ScreenName")]
        public ScreenNameBlueType[] ScreenName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("TelephoneNumber")]
        public TelephoneNumberBlueType[] TelephoneNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("IdentificationNumber")]
        public IdentificationNumberBlueType[] IdentificationNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("WorkInformation")]
        public WorkInformationBlueType[] WorkInformation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("UserReference")]
        public CategorizedUserReferenceBlueType[] UserReference;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SecurityCertificate")]
        public SecurityCertificateBlueType[] SecurityCertificate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ContactTypeSynchronize Synchronize;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.iquomi.com/2004/01/iqContacts")]
    public enum ContactTypeSynchronize {
        
        /// <remarks/>
        Yes,
        
        /// <remarks/>
        No,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqContacts")]
    public partial class IqContactsType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Contact")]
        public ContactType[] Contact;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Subscription")]
        public SubscriptionType[] Subscription;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string InstanceId;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class ListenTriggerType {
        
        /// <remarks/>
        public ListenTriggerTypeTriggerData TriggerData;
        
        /// <remarks/>
        public ListenTriggerTypeContext Context;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class ListenTriggerTypeTriggerData {
        
        /// <remarks/>
        public ChangedBlueType ChangedBlue;
        
        /// <remarks/>
        public DeletedBlueType DeletedBlue;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class ChangedBlueType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        public object[] Items;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class DeletedBlueType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Id;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class ListenTriggerTypeContext {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        public object[] Items;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        public string Uri;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class ChangeQueryResponseType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ChangedBlue")]
        public ChangedBlueType[] ChangedBlue;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DeletedBlue")]
        public DeletedBlueType[] DeletedBlue;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string BaseChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int SelectedNodeCount;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SelectedNodeCountSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Message;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ResponseStatus Status;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public enum ResponseStatus {
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        Failure,
        
        /// <remarks/>
        Rollback,
        
        /// <remarks/>
        NotAttempted,
        
        /// <remarks/>
        AccessDenied,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class XpQueryResponseType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        public object[] Items;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int SelectedNodeCount;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SelectedNodeCountSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Message;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ResponseStatus Status;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class QueryResponseType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("XpQueryResponse")]
        public XpQueryResponseType[] XpQueryResponse;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ChangeQueryResponse")]
        public ChangeQueryResponseType[] ChangeQueryResponse;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class ChangeQueryType {
        
        /// <remarks/>
        public QueryOptionsType Options;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Select;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string BaseChangeNumber;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class QueryOptionsType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Sort")]
        public SortType[] Sort;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Range")]
        public RangeType[] Range;
        
        /// <remarks/>
        public ShapeType Shape;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class SortType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SortTypeDirection.Ascending)]
        public SortTypeDirection Direction;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Key;
        
        public SortType() {
            this.Direction = SortTypeDirection.Ascending;
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.iquomi.com/2004/01/core")]
    public enum SortTypeDirection {
        
        /// <remarks/>
        Ascending,
        
        /// <remarks/>
        Descending,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class RangeType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string First;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Count;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class ShapeType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public ShapeTypeType Type;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string Select;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.iquomi.com/2004/01/core")]
    public enum ShapeTypeType {
        
        /// <remarks/>
        Include,
        
        /// <remarks/>
        Exclude,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class XpQueryType {
        
        /// <remarks/>
        public QueryOptionsType Options;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Select;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MinOccurs;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MinOccursSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MaxOccurs;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MaxOccursSpecified;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class QueryRequestType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("XpQuery")]
        public XpQueryType[] XpQuery;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ChangeQuery")]
        public ChangeQueryType[] ChangeQuery;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class UpdateBlockStatusType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("InsertResponse")]
        public InsertResponseType[] InsertResponse;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DeleteResponse")]
        public DeleteResponseType[] DeleteResponse;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ReplaceResponse")]
        public ReplaceResponseType[] ReplaceResponse;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int SelectedNodeCount;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SelectedNodeCountSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Message;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ResponseStatus Status;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class InsertResponseType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("NewBlueId")]
        public NewBlueIdType[] NewBlueId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string NewChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int SelectedNodeCount;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SelectedNodeCountSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Message;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ResponseStatus Status;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class NewBlueIdType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Id;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class DeleteResponseType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string NewChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int SelectedNodeCount;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SelectedNodeCountSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Message;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ResponseStatus Status;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class ReplaceResponseType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("NewBlueId")]
        public NewBlueIdType[] NewBlueId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string NewChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int SelectedNodeCount;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SelectedNodeCountSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Message;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ResponseStatus Status;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class UpdateResponseType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("UpdateBlockStatus")]
        public UpdateBlockStatusType[] UpdateBlockStatus;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string NewChangeNumber;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class UpdateBlockType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("InsertRequest")]
        public InsertRequestType[] InsertRequest;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DeleteRequest")]
        public DeleteRequestType[] DeleteRequest;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ReplaceRequest")]
        public ReplaceRequestType[] ReplaceRequest;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Select;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public UpdateBlockTypeOnError OnError;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class InsertRequestType {
        
        /// <remarks/>
        public InsertRequestOptionsType Options;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Attributes")]
        public RedAttributeType[] Attributes;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        public object[] Items;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Select;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool UseClientIds;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseClientIdsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MinOccurs;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MinOccursSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MaxOccurs;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MaxOccursSpecified;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class InsertRequestOptionsType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class RedAttributeType {
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public string Value;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class DeleteRequestType {
        
        /// <remarks/>
        public DeleteRequestOptionsType Options;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Select;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MinOccurs;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MinOccursSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MaxOccurs;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MaxOccursSpecified;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class DeleteRequestOptionsType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class ReplaceRequestType {
        
        /// <remarks/>
        public ReplaceRequestOptionsType Options;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Attributes")]
        public RedAttributeType[] Attributes;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        public object[] Items;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Select;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool UseClientIds;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseClientIdsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MinOccurs;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MinOccursSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MaxOccurs;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MaxOccursSpecified;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class ReplaceRequestOptionsType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.iquomi.com/2004/01/core")]
    public enum UpdateBlockTypeOnError {
        
        /// <remarks/>
        RollbackBlockAndFail,
        
        /// <remarks/>
        RollbackBlockAndContinue,
        
        /// <remarks/>
        Ignore,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts")]
    public partial class RoutingType {
        
        /// <remarks/>
        public string Timestamp;
        
        /// <remarks/>
        public string Hops;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts")]
    public partial class ContentsType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("Argot", IsNullable=false)]
        public ArrayOfArgotListTypeArgotArgot[] Argot;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.iquomi.com/2004/01/iqAlerts")]
    public partial class ArrayOfArgotListTypeArgotArgot : ArgotType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Id;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts")]
    public partial class ArgotType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        public string ArgotURI;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts")]
    public partial class ToType {
        
        /// <remarks/>
        public string OriginalUser;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts")]
    public partial class CategoryType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Id;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts")]
    public partial class ExpiresType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Ttl;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string OnDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Replace;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts")]
    public partial class IdentityHeaderType {
        
        /// <remarks/>
        public string OnBehalfOfUser;
        
        /// <remarks/>
        public string LicenseHolder;
        
        /// <remarks/>
        public string PlatformId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Type;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts")]
    public partial class FromType {
        
        /// <remarks/>
        public IdentityHeaderType IdentityHeader;
        
        /// <remarks/>
        public ExpiresType ExpiresAt;
        
        /// <remarks/>
        public string Acknowledge;
        
        /// <remarks/>
        public CategoryType Category;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts")]
    public partial class NotificationType {
        
        /// <remarks/>
        public FromType From;
        
        /// <remarks/>
        public ToType To;
        
        /// <remarks/>
        public ContentsType Contents;
        
        /// <remarks/>
        public RoutingType Routing;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Id;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts/Notify.xsd")]
    public partial class NotifyResponseType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ResponseStatusType Status;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts/Notify.xsd")]
    public enum ResponseStatusType {
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        Failure,
        
        /// <remarks/>
        Rollback,
        
        /// <remarks/>
        NotAttempted,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts/Notify.xsd")]
    public partial class MetaType {
        
        /// <remarks/>
        public string ActionUrl;
        
        /// <remarks/>
        public string BaseUrl;
        
        /// <remarks/>
        public string IconUrl;
        
        /// <remarks/>
        public string Subject;
        
        /// <remarks/>
        public string SubscriptionUrl;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts/Notify.xsd")]
    public partial class ViewType {
        
        /// <remarks/>
        public string ContentType;
        
        /// <remarks/>
        public string DeviceHint;
        
        /// <remarks/>
        public string Subject;
        
        /// <remarks/>
        public string Value;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts/Notify.xsd")]
    public partial class NotifyType {
        
        /// <remarks/>
        public ViewType Content;
        
        /// <remarks/>
        public string Language;
        
        /// <remarks/>
        public MetaType Meta;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class RequestType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Key")]
        public RequestTypeKey[] Key;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Service;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public RequestTypeDocument Document;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public RequestTypeMethod Method;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public RequestTypeGenResponse GenResponse;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.iquomi.com/2004/01/core")]
    public partial class RequestTypeKey {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Puid;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Instance;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Cluster;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.iquomi.com/2004/01/core")]
    public enum RequestTypeDocument {
        
        /// <remarks/>
        Content,
        
        /// <remarks/>
        RoleList,
        
        /// <remarks/>
        NotifyList,
        
        /// <remarks/>
        Policy,
        
        /// <remarks/>
        System,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.iquomi.com/2004/01/core")]
    public enum RequestTypeMethod {
        
        /// <remarks/>
        Insert,
        
        /// <remarks/>
        Delete,
        
        /// <remarks/>
        Replace,
        
        /// <remarks/>
        Update,
        
        /// <remarks/>
        Query,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.iquomi.com/2004/01/core")]
    public enum RequestTypeGenResponse {
        
        /// <remarks/>
        Always,
        
        /// <remarks/>
        Never,
        
        /// <remarks/>
        FaultOnly,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts")]
    public partial class ConnectionType {
        
        /// <remarks/>
        public ConnectionClassType Class;
        
        /// <remarks/>
        public ConnectionStatusType Status;
        
        /// <remarks/>
        public ConnectionCharacteristicsType Characteristics;
        
        /// <remarks/>
        public System.DateTime Expiration;
        
        /// <remarks/>
        public NotificationQueryType ArgotQuery;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Argot")]
        public ArgotType[] Argot;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts")]
    public enum ConnectionClassType {
        
        /// <remarks/>
        Push_http,
        
        /// <remarks/>
        Pull_http,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts")]
    public enum ConnectionStatusType {
        
        /// <remarks/>
        Active,
        
        /// <remarks/>
        Inactive,
        
        /// <remarks/>
        Busy,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts")]
    public enum ConnectionCharacteristicsType {
        
        /// <remarks/>
        Reliable,
        
        /// <remarks/>
        Unreliable,
        
        /// <remarks/>
        ConnectionPoll,
        
        /// <remarks/>
        UserAgentPoll,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts")]
    public enum NotificationQueryType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("*")]
        Item,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts")]
    public partial class StreamType {
        
        /// <remarks/>
        public StreamClassType Class;
        
        /// <remarks/>
        public System.DateTime Expiration;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExpirationSpecified;
        
        /// <remarks/>
        public StreamPositionType Position;
        
        /// <remarks/>
        public NotificationQueryType ArgotQuery;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ArgotQuerySpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Argot")]
        public ArgotType[] Argot;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="nonNegativeInteger")]
        public string ChangeNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core")]
        public string Id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.iquomi.com/2004/01/core", DataType="hexBinary")]
        public byte[] Creator;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts")]
    public enum StreamClassType {
        
        /// <remarks/>
        Buffer,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts")]
    public enum StreamPositionType {
        
        /// <remarks/>
        AtFront,
        
        /// <remarks/>
        AtEnd,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.iquomi.com/2004/01/iqAlerts")]
    public partial class IqAlertsType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Stream")]
        public StreamType[] Stream;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Connection")]
        public ConnectionType[] Connection;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Subscription")]
        public SubscriptionType[] Subscription;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.iquomi.com/2004/01/core")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://services.iquomi.com/2004/01/core", IsNullable=false)]
    public partial class SoapRequestType : System.Web.Services.Protocols.SoapHeader {
        
        /// <remarks/>
        public RequestType Value;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.iquomi.com/2004/01/iqPresence")]
    public partial class req {
        
        /// <remarks/>
        public string EndpointId;
        
        /// <remarks/>
        public NotificationType Notification;
    }
    
    /// <remarks/>
    public delegate void VoidCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    public delegate void NotifyCompletedEventHandler(object sender, NotifyCompletedEventArgs e);
    
    /// <remarks/>
    public partial class NotifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NotifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NotifyResponseType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NotifyResponseType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void DebugListUsersCompletedEventHandler(object sender, DebugListUsersCompletedEventArgs e);
    
    /// <remarks/>
    public partial class DebugListUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DebugListUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void InsertCompletedEventHandler(object sender, InsertCompletedEventArgs e);
    
    /// <remarks/>
    public partial class InsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public InsertResponseType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((InsertResponseType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void DeleteCompletedEventHandler(object sender, DeleteCompletedEventArgs e);
    
    /// <remarks/>
    public partial class DeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DeleteResponseType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DeleteResponseType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void ReplaceCompletedEventHandler(object sender, ReplaceCompletedEventArgs e);
    
    /// <remarks/>
    public partial class ReplaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReplaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReplaceResponseType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReplaceResponseType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void UpdateCompletedEventHandler(object sender, UpdateCompletedEventArgs e);
    
    /// <remarks/>
    public partial class UpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UpdateResponseType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UpdateResponseType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void QueryCompletedEventHandler(object sender, QueryCompletedEventArgs e);
    
    /// <remarks/>
    public partial class QueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public QueryResponseType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((QueryResponseType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void ListenResponseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    public delegate void VoidCompletedEventHandler1(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    public delegate void NotifyEndpointCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    public delegate void VoidCompletedEventHandler2(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
