<klip>
	
	<owner>

		<author>
			David Shafer
		</author>

		<copyright>
			Copyright 2002-2003 David G. Shafer.  All other trademarks are the property of their respective owners.
		</copyright>

		<email>
			cocodingcub@yahoo.com
		</email>

		<web>
			http://home.attbi.com/~cocodingcub/
		</web>

	</owner>

	<identity>
		
		<title>
			Package Tracker
		</title>
		
		<uniqueid>
			DGS.UID.2002.Pack
		</uniqueid>
		
		<version>
			1.3
		</version>
		
		<lastmodified>
			<!--
			the date this Klip was last modified yyyy.mm.dd:hhmm
			-->
			2003.04.24:1820
		</lastmodified>

		<description>
			Provides package tracking for UPS and FedEx.  Updated to show more detail for UPS shipments.  Thanks to the great people at Serence for making the icon and banner for my klip.  Please send any troublesome tracking numbers to cocodingcub@yahoo.com for bug fixes.
		</description>

		<keywords>
			UPS Fedex package tracking shipping delivery ground Federal express
		</keywords>

	</identity>
	
	<locations>

		<defaultlink>
		</defaultlink>

		<contentsource>
		</contentsource>

		<icon>
			http://www.klipfarm.com/beta/klipfiles/icon_small/1014
		</icon>

		<banner>
			<!--
			a url pointing to this Klip's 234x60 gif or jpeg banner 
			-->
			http://home.attbi.com/~cocodingcub/package_tracker_banner.gif
		</banner>

		<help>
		</help>

		<kliplocation>
			http://www.klipfarm.com/farm.php?page=info&klip=1014
		</kliplocation>	

	</locations>
	
	<setup>

		<refresh>
			60
		</refresh>

		<referer>
		</referer>

		<country>
			US
		</country>

		<language>
			en
		</language>

	</setup>

	<!-- Messages Section
	Include this section in your Klip to show a different message while your
	Klip loads or has no data to display
	-->
	<messages>
		<loading>
			No tracking numbers entered, please enter a number in this klip's setup window
		</loading>
	</messages>
	
	<klipscript><![CDATA[

// Klip script follows


Setup.addTab("Refresh");
//refresh stuff
//Credit to Serance for this.
Setup[0].addText ("How often should this feed refresh:");
if (!Prefs.getPref ("rfr"))
{
  Prefs.setPref ("rfr", "" + Prefs.refreshrate);
}
var rfr_txt = Setup[0].addTextField (Prefs.getPref ("rfr"));
Klip.Setup[0].addText ("NOTE: Refresh rate is in minutes (1440 is one day.) Changes to this rate are applied after the next refresh.");

Klip.Setup.addTab("Num");
Setup[0].addText("Enter UPS and FedEx Tracking Numbers here:");      
var pack_fields = new Array ();
for (i = 0; i < 5; i++)
{
  pack_fields.push (Setup[0].addTextField ());
  pack_fields[i].value = Prefs.getPref ("pack_" + i);
}
Klip.Setup[0].addText("Please send any non-working current tracking numbers to cocodingcub@yahoo.com for bug fixes");

Klip.Setup.addTab("Desc");
Setup[0].addText("Enter package descritions here:");
var desc_fields = new Array ();
for (i = 0; i < 5; i++)
{
  desc_fields.push (Setup[0].addTextField ());
  desc_fields[i].value = Prefs.getPref ("desc_" + i);
}

Klip.Setup[0].addText("Please send any non-working current tracking numbers to cocodingcub@yahoo.com for bug fixes");

debug = false;
samples = false;
testNum = false;
klipPageVers = "05.02.10";

if(testNum)
{
  Klip.Setup[1][1].value = "1ZX1W2350300617707";
  Klip.Setup[0][1].value = "Test Number";
}

if(samples)
{
  Klip.Setup[1][1].value = "056249490003149";
  Klip.Setup[0][1].value = "FedEx";

  Klip.Setup[1][2].value = "1Z31W7800343941283";
  Klip.Setup[0][2].value = "UPS 1";

  Klip.Setup[1][3].value = "1Z97Y3Y70341665984";
  Klip.Setup[0][3].value = "UPS 2";
}

function myRefreshHandler ()
{
  //handle the refresh stuff.
  //Credit to Serance for this.
  rfr = Number (rfr_txt.value);
  if (rfr > 0)
  {
    Prefs.setPref ("rfr", rfr_txt.value);
    Prefs.refreshrate = rfr;
  }
  else
  {
    if (!Prefs.getPref ("rfr"))
    {
      Prefs.setPref ("rfr", "" + Prefs.refreshrate);
    }
    rfr_txt.value = Prefs.getPref ("rfr");
  }

  Items.clearItems(true);
  packs = 0;

  for (i=0; i < pack_fields.length; i++)
  {
    if (pack_fields[i].value.length > 0)
    {
      packs = packs + 1;

      rtd = getStatus(desc_fields[i].value, pack_fields[i].value);

      Prefs.setPref ("pack_" + i, pack_fields[i].value);
      Prefs.setPref ("desc_" + i, desc_fields[i].value);
    }
    else
    {
      Prefs.delPref ("pack_" + i);
      Prefs.delPref ("desc_" + i);
    }
  }

  Items.B = "" + packs;
  Items.altB = "You are tracking " + packs + " packages";

  return true;
}

function getStatus(desc, tnum)
{
  if(isUPS(tnum))
    return getStatusUPS(desc, tnum);
  else
    return getStatusFedex(desc, tnum);
}

function getStatusFedex(desc, tnum)
{
  fedexurl = "http://www.fedex.com/cgi-bin/tracking?tracknumbers=" + tnum + "&action=track&language=english&cntry_code=us&mps=y";

  // create my request
  request = Engines.HTTP.newRequest (fedexurl);

  // send my request
  if (!request.send ())
  {
    // abort if we couldn't send the request
    return false;
  }

  // get the response data from the request
  data = request.response.data;

  if (isExpress(data))
  {
    if(debug)
      alert("Package is FedEx Express");

    Items.addItem ("------- " + desc + " ~ " + tnum + " -------", fedexurl);

    myRE = new RegExp("resultstableheader((\\n|\\r|.)*?)</TABLE>", "g");
    myMatches = myRE.exec (data);

    parseExpress(myMatches[1]);
  }
  else if (isGround(data))
  {
    if(debug)
      alert("Package is FedEx Ground");

    Items.addItem ("------- " + desc + " ~ " + tnum + " -------", fedexurl);

    myRE = new RegExp("resultstableheader((\\n|\\r|.)*?)</TABLE>", "g");
    myMatches = myRE.exec (data);

    parseGround(myMatches[1]);
  }
  else
  {
    if(debug)
      alert("Invalid page");

    // abort if we couldn't find new Klips
    return false;
  }

  // we've succeeded, so return true
  return true;
}

function parseExpress(data)
{
  // build a regular expression to extract each new Klip
  myRE = new RegExp("resultstable\">([A-Z a-z]*[a-z]+)/([A-Z ]+ +[A-Z]{2})\n.*</TD>\n.*resultstable\">(.+)\n.*</TD>\n.*resultstable\">.{6}(.*)\n","g");

  // loop until we get all the new Klips
  while (myMatches = myRE.exec (data))
  {
    // add each new Klip as an item
    itemIndex = Items.addItem (myMatches[3] + " ~ " + myMatches[2] + " ~ " + myMatches[1], fedexurl);
    Items[itemIndex].note = myMatches[4];
  }
}

function parseGround(data)
{
  // build a regular expression to extract each new Klip
  myRE = new RegExp("resultstable\">(.*)/(.*)</TD>\n.*resultstable\">(.+)</TD>","g");

  // loop until we get all the new Klips
  while (myMatches = myRE.exec (data))
  {
    // add each new Klip as an item
    Items.addItem (myMatches[3] + " ~ " + myMatches[2] + " ~ " + myMatches[1], fedexurl);
  }
}

function isGround(data)
{
  myRE = new RegExp("Scan Activity((\\n|\\r|.)*?)Date/Time", "g");
  myMatches = myRE.exec (data);

  if (myMatches)
    return true;
  
  return false;
}

function isExpress(data)
{
  myRE = new RegExp("Scan Activity((\\n|\\r|.)*?)Date/Time((\\n|\\r|.)*?)Comments", "g");
  myMatches = myRE.exec (data);

  if (myMatches)
    return true;
  
  return false;
}

function isUPS(tnum)
{
  if(tnum.length == 18)
    return true;

  return false;
}

function getStatusUPS(desc, tnum)
{
  upsurl = "http://wwwapps.ups.com/WebTracking/processInputRequest?HTMLVersion=5.0&sort_by=status&term_warn=yes&tracknums_displayed=5&TypeOfInquiryNumber=T&loc=en_US&InquiryNumber1=" + tnum + "&InquiryNumber2=&InquiryNumber3=&InquiryNumber4=&InquiryNumber5=&AgreeToTermsAndConditions=yes&track.x=20&track.y=11";

  // create my request
  request = Engines.HTTP.newRequest (upsurl);

  // send my request
  if (!request.send ())
  {
    // abort if we couldn't send the request
    return false;
  }

  // get the response data from the request
  data = request.response.data;

  if(data)
  {
    if(debug)
    {
      alert("Package is UPS");

      versRE = new RegExp("Version v(.) -->", "g");
      versMatch = versRE.exec(data);

      if (versMatch)
        alert("UPS page version " + versMatch[1] + "\nKlip handles version " + klipPageVers);
    }

    Items.addItem ("------- " + desc + " ~ " + tnum + " -------", upsurl);

    myRE = new RegExp("processRequest\" method=\"post\"((\\n|\\r|.)*?)Page Heading", "g");

    myMatches = myRE.exec (data);

    if(debug)
      if(!myMatches)
        alert("Error finding POST data block");

    getUPSdetail(myMatches[1]);

  }
  else
  {
    if(debug)
      alert("Invalid page");

    // abort if we couldn't find new Klips
    return false;
  }

  // we've succeeded, so return true
  return true;
}


function getUPSdetail(data)
{
  if(debug)
    alert("Parsing POST data");

  // build a regular expression to extract each new Klip
  myRE = new RegExp("NAME=\"(.*)\" VALUE=\"(.*)\">\n","g");

  postinfo = "";

  // loop until we get all the new Klips
  while (myMatches = myRE.exec (data))
  {
    // add each new Klip as an item
    postinfo = postinfo + myMatches[1] + "=" + myMatches[2] + "&";
  }

  if(debug)
    alert("Cleaning POST data");

  postinfo = cleanPostData(postinfo);

  postURL = "http://wwwapps.ups.com/WebTracking/processRequest"

  // create my request
  request = Engines.HTTP.newRequest (postURL);
  request.postdata = postinfo;
  request.method = "POST";

  if(debug)
    alert("Sending detail request");

  // send my request
  if (!request.send ())
  {
    // abort if we couldn't send the request
    return false;
  }

  // get the response data from the request
  data = request.response.data;

  parseUPS(data);
}


function parseUPS(data)
{
  if(debug)
    alert("Beginning detail parse");

  // build a regular expression to extract each new Klip
  myRE = new RegExp("div class=\"modulepad\">(.{1,80})</div>","g");
  dateRE = new RegExp("(.*[0-9]{1,2}.*[0-9]{4})","g");

  newdata = createUPSdetail(data);

  // loop until we get all the new Klips
  dv = "";
  while (myMatches = myRE.exec (newdata))
  {
    if (dateMatch = dateRE.exec(myMatches[1]))
    {
      dv = "" + dateMatch[0];
      if (debug)
        alert("Found date");
      myMatches = myRE.exec (newdata);
    }

    else
      myMatches = myRE.exec (newdata);

    if(debug)
      alert("Found item detail");

    itmstr = dv + myMatches[1];

    myMatches = myRE.exec (newdata);
    itmstr = itmstr + " ~ " + myMatches[1];

    myMatches = myRE.exec (newdata);
    itmstr = itmstr + " ~ " + myMatches[1];

    // add each new Klip as an item
    Items.addItem (itmstr, upsurl);
  }
}


function createUPSdetail(cw_t)
{
  if(debug)
    alert("Compressing whitespace");

  // replace all whitespace with a single space
  newd = cw_t.replace (/\s+/g, " ");

  if(debug)
    alert("Finding detail block");

  newRE = new RegExp("Activity(.*)Tracking results provided by UPS","g");

  matchval = newRE.exec(newd);

  if(debug)
    if(!matchval)
      alert("Could not find detail block");

  return matchval[1];
}

function cleanPostData(cwt)
{
  newd = cwt.replace(/\,/g, "%2C");
  newd = newd.replace(/\:/g, "%3A");
  newd = newd.replace(/\\/g, "%5C");
  newd = newd.replace(/ /g, "+");

  newd = newd + "tdts1.x=13&tdts1.y=12";

  return newd;
}

// assign my refresh handler to the Klip's onRefresh event
Klip.onRefresh = myRefreshHandler;


]]></klipscript>
</klip>